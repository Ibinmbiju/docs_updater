{
  "markdown": "[Skip to content](https://openai.github.io/openai-agents-python/ref/tracing/span_data/#span-data)\n\n# `Span data`\n\n### SpanData\n\nBases: `ABC`\n\nRepresents span data in the trace.\n\nSource code in `src/agents/tracing/span_data.py`\n\n|     |     |\n| --- | --- |\n| ```<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>``` | ```md-code__content<br>class SpanData(abc.ABC):<br>    \"\"\"<br>    Represents span data in the trace.<br>    \"\"\"<br>    @abc.abstractmethod<br>    def export(self) -> dict[str, Any]:<br>        \"\"\"Export the span data as a dictionary.\"\"\"<br>        pass<br>    @property<br>    @abc.abstractmethod<br>    def type(self) -> str:<br>        \"\"\"Return the type of the span.\"\"\"<br>        pass<br>``` |\n\n#### type`abstractmethod``property`\n\n```md-code__content\ntype: str\n\n```\n\nReturn the type of the span.\n\n#### export`abstractmethod`\n\n```md-code__content\nexport() -> dict[str, Any]\n\n```\n\nExport the span data as a dictionary.\n\nSource code in `src/agents/tracing/span_data.py`\n\n|     |     |\n| --- | --- |\n| ```<br>16<br>17<br>18<br>19<br>``` | ```md-code__content<br>@abc.abstractmethod<br>def export(self) -> dict[str, Any]:<br>    \"\"\"Export the span data as a dictionary.\"\"\"<br>    pass<br>``` |\n\n### AgentSpanData\n\nBases: `SpanData`\n\nRepresents an Agent Span in the trace.\nIncludes name, handoffs, tools, and output type.\n\nSource code in `src/agents/tracing/span_data.py`\n\n|     |     |\n| --- | --- |\n| ```<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>``` | ```md-code__content<br>class AgentSpanData(SpanData):<br>    \"\"\"<br>    Represents an Agent Span in the trace.<br>    Includes name, handoffs, tools, and output type.<br>    \"\"\"<br>    __slots__ = (\"name\", \"handoffs\", \"tools\", \"output_type\")<br>    def __init__(<br>        self,<br>        name: str,<br>        handoffs: list[str] | None = None,<br>        tools: list[str] | None = None,<br>        output_type: str | None = None,<br>    ):<br>        self.name = name<br>        self.handoffs: list[str] | None = handoffs<br>        self.tools: list[str] | None = tools<br>        self.output_type: str | None = output_type<br>    @property<br>    def type(self) -> str:<br>        return \"agent\"<br>    def export(self) -> dict[str, Any]:<br>        return {<br>            \"type\": self.type,<br>            \"name\": self.name,<br>            \"handoffs\": self.handoffs,<br>            \"tools\": self.tools,<br>            \"output_type\": self.output_type,<br>        }<br>``` |\n\n### FunctionSpanData\n\nBases: `SpanData`\n\nRepresents a Function Span in the trace.\nIncludes input, output and MCP data (if applicable).\n\nSource code in `src/agents/tracing/span_data.py`\n\n|     |     |\n| --- | --- |\n| ```<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>93<br>``` | ```md-code__content<br>class FunctionSpanData(SpanData):<br>    \"\"\"<br>    Represents a Function Span in the trace.<br>    Includes input, output and MCP data (if applicable).<br>    \"\"\"<br>    __slots__ = (\"name\", \"input\", \"output\", \"mcp_data\")<br>    def __init__(<br>        self,<br>        name: str,<br>        input: str | None,<br>        output: Any | None,<br>        mcp_data: dict[str, Any] | None = None,<br>    ):<br>        self.name = name<br>        self.input = input<br>        self.output = output<br>        self.mcp_data = mcp_data<br>    @property<br>    def type(self) -> str:<br>        return \"function\"<br>    def export(self) -> dict[str, Any]:<br>        return {<br>            \"type\": self.type,<br>            \"name\": self.name,<br>            \"input\": self.input,<br>            \"output\": str(self.output) if self.output else None,<br>            \"mcp_data\": self.mcp_data,<br>        }<br>``` |\n\n### GenerationSpanData\n\nBases: `SpanData`\n\nRepresents a Generation Span in the trace.\nIncludes input, output, model, model configuration, and usage.\n\nSource code in `src/agents/tracing/span_data.py`\n\n|     |     |\n| --- | --- |\n| ```<br> 96<br> 97<br> 98<br> 99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>``` | ```md-code__content<br>class GenerationSpanData(SpanData):<br>    \"\"\"<br>    Represents a Generation Span in the trace.<br>    Includes input, output, model, model configuration, and usage.<br>    \"\"\"<br>    __slots__ = (<br>        \"input\",<br>        \"output\",<br>        \"model\",<br>        \"model_config\",<br>        \"usage\",<br>    )<br>    def __init__(<br>        self,<br>        input: Sequence[Mapping[str, Any]] | None = None,<br>        output: Sequence[Mapping[str, Any]] | None = None,<br>        model: str | None = None,<br>        model_config: Mapping[str, Any] | None = None,<br>        usage: dict[str, Any] | None = None,<br>    ):<br>        self.input = input<br>        self.output = output<br>        self.model = model<br>        self.model_config = model_config<br>        self.usage = usage<br>    @property<br>    def type(self) -> str:<br>        return \"generation\"<br>    def export(self) -> dict[str, Any]:<br>        return {<br>            \"type\": self.type,<br>            \"input\": self.input,<br>            \"output\": self.output,<br>            \"model\": self.model,<br>            \"model_config\": self.model_config,<br>            \"usage\": self.usage,<br>        }<br>``` |\n\n### ResponseSpanData\n\nBases: `SpanData`\n\nRepresents a Response Span in the trace.\nIncludes response and input.\n\nSource code in `src/agents/tracing/span_data.py`\n\n|     |     |\n| --- | --- |\n| ```<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>``` | ```md-code__content<br>class ResponseSpanData(SpanData):<br>    \"\"\"<br>    Represents a Response Span in the trace.<br>    Includes response and input.<br>    \"\"\"<br>    __slots__ = (\"response\", \"input\")<br>    def __init__(<br>        self,<br>        response: Response | None = None,<br>        input: str | list[ResponseInputItemParam] | None = None,<br>    ) -> None:<br>        self.response = response<br>        # This is not used by the OpenAI trace processors, but is useful for other tracing<br>        # processor implementations<br>        self.input = input<br>    @property<br>    def type(self) -> str:<br>        return \"response\"<br>    def export(self) -> dict[str, Any]:<br>        return {<br>            \"type\": self.type,<br>            \"response_id\": self.response.id if self.response else None,<br>        }<br>``` |\n\n### HandoffSpanData\n\nBases: `SpanData`\n\nRepresents a Handoff Span in the trace.\nIncludes source and destination agents.\n\nSource code in `src/agents/tracing/span_data.py`\n\n|     |     |\n| --- | --- |\n| ```<br>168<br>169<br>170<br>171<br>172<br>173<br>174<br>175<br>176<br>177<br>178<br>179<br>180<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>189<br>``` | ```md-code__content<br>class HandoffSpanData(SpanData):<br>    \"\"\"<br>    Represents a Handoff Span in the trace.<br>    Includes source and destination agents.<br>    \"\"\"<br>    __slots__ = (\"from_agent\", \"to_agent\")<br>    def __init__(self, from_agent: str | None, to_agent: str | None):<br>        self.from_agent = from_agent<br>        self.to_agent = to_agent<br>    @property<br>    def type(self) -> str:<br>        return \"handoff\"<br>    def export(self) -> dict[str, Any]:<br>        return {<br>            \"type\": self.type,<br>            \"from_agent\": self.from_agent,<br>            \"to_agent\": self.to_agent,<br>        }<br>``` |\n\n### CustomSpanData\n\nBases: `SpanData`\n\nRepresents a Custom Span in the trace.\nIncludes name and data property bag.\n\nSource code in `src/agents/tracing/span_data.py`\n\n|     |     |\n| --- | --- |\n| ```<br>192<br>193<br>194<br>195<br>196<br>197<br>198<br>199<br>200<br>201<br>202<br>203<br>204<br>205<br>206<br>207<br>208<br>209<br>210<br>211<br>212<br>213<br>``` | ```md-code__content<br>class CustomSpanData(SpanData):<br>    \"\"\"<br>    Represents a Custom Span in the trace.<br>    Includes name and data property bag.<br>    \"\"\"<br>    __slots__ = (\"name\", \"data\")<br>    def __init__(self, name: str, data: dict[str, Any]):<br>        self.name = name<br>        self.data = data<br>    @property<br>    def type(self) -> str:<br>        return \"custom\"<br>    def export(self) -> dict[str, Any]:<br>        return {<br>            \"type\": self.type,<br>            \"name\": self.name,<br>            \"data\": self.data,<br>        }<br>``` |\n\n### GuardrailSpanData\n\nBases: `SpanData`\n\nRepresents a Guardrail Span in the trace.\nIncludes name and triggered status.\n\nSource code in `src/agents/tracing/span_data.py`\n\n|     |     |\n| --- | --- |\n| ```<br>216<br>217<br>218<br>219<br>220<br>221<br>222<br>223<br>224<br>225<br>226<br>227<br>228<br>229<br>230<br>231<br>232<br>233<br>234<br>235<br>236<br>237<br>``` | ```md-code__content<br>class GuardrailSpanData(SpanData):<br>    \"\"\"<br>    Represents a Guardrail Span in the trace.<br>    Includes name and triggered status.<br>    \"\"\"<br>    __slots__ = (\"name\", \"triggered\")<br>    def __init__(self, name: str, triggered: bool = False):<br>        self.name = name<br>        self.triggered = triggered<br>    @property<br>    def type(self) -> str:<br>        return \"guardrail\"<br>    def export(self) -> dict[str, Any]:<br>        return {<br>            \"type\": self.type,<br>            \"name\": self.name,<br>            \"triggered\": self.triggered,<br>        }<br>``` |\n\n### TranscriptionSpanData\n\nBases: `SpanData`\n\nRepresents a Transcription Span in the trace.\nIncludes input, output, model, and model configuration.\n\nSource code in `src/agents/tracing/span_data.py`\n\n|     |     |\n| --- | --- |\n| ```<br>240<br>241<br>242<br>243<br>244<br>245<br>246<br>247<br>248<br>249<br>250<br>251<br>252<br>253<br>254<br>255<br>256<br>257<br>258<br>259<br>260<br>261<br>262<br>263<br>264<br>265<br>266<br>267<br>268<br>269<br>270<br>271<br>272<br>273<br>274<br>275<br>276<br>277<br>278<br>279<br>280<br>281<br>``` | ```md-code__content<br>class TranscriptionSpanData(SpanData):<br>    \"\"\"<br>    Represents a Transcription Span in the trace.<br>    Includes input, output, model, and model configuration.<br>    \"\"\"<br>    __slots__ = (<br>        \"input\",<br>        \"output\",<br>        \"model\",<br>        \"model_config\",<br>    )<br>    def __init__(<br>        self,<br>        input: str | None = None,<br>        input_format: str | None = \"pcm\",<br>        output: str | None = None,<br>        model: str | None = None,<br>        model_config: Mapping[str, Any] | None = None,<br>    ):<br>        self.input = input<br>        self.input_format = input_format<br>        self.output = output<br>        self.model = model<br>        self.model_config = model_config<br>    @property<br>    def type(self) -> str:<br>        return \"transcription\"<br>    def export(self) -> dict[str, Any]:<br>        return {<br>            \"type\": self.type,<br>            \"input\": {<br>                \"data\": self.input or \"\",<br>                \"format\": self.input_format,<br>            },<br>            \"output\": self.output,<br>            \"model\": self.model,<br>            \"model_config\": self.model_config,<br>        }<br>``` |\n\n### SpeechSpanData\n\nBases: `SpanData`\n\nRepresents a Speech Span in the trace.\nIncludes input, output, model, model configuration, and first content timestamp.\n\nSource code in `src/agents/tracing/span_data.py`\n\n|     |     |\n| --- | --- |\n| ```<br>284<br>285<br>286<br>287<br>288<br>289<br>290<br>291<br>292<br>293<br>294<br>295<br>296<br>297<br>298<br>299<br>300<br>301<br>302<br>303<br>304<br>305<br>306<br>307<br>308<br>309<br>310<br>311<br>312<br>313<br>314<br>315<br>316<br>317<br>318<br>319<br>320<br>321<br>322<br>323<br>``` | ```md-code__content<br>class SpeechSpanData(SpanData):<br>    \"\"\"<br>    Represents a Speech Span in the trace.<br>    Includes input, output, model, model configuration, and first content timestamp.<br>    \"\"\"<br>    __slots__ = (\"input\", \"output\", \"model\", \"model_config\", \"first_content_at\")<br>    def __init__(<br>        self,<br>        input: str | None = None,<br>        output: str | None = None,<br>        output_format: str | None = \"pcm\",<br>        model: str | None = None,<br>        model_config: Mapping[str, Any] | None = None,<br>        first_content_at: str | None = None,<br>    ):<br>        self.input = input<br>        self.output = output<br>        self.output_format = output_format<br>        self.model = model<br>        self.model_config = model_config<br>        self.first_content_at = first_content_at<br>    @property<br>    def type(self) -> str:<br>        return \"speech\"<br>    def export(self) -> dict[str, Any]:<br>        return {<br>            \"type\": self.type,<br>            \"input\": self.input,<br>            \"output\": {<br>                \"data\": self.output or \"\",<br>                \"format\": self.output_format,<br>            },<br>            \"model\": self.model,<br>            \"model_config\": self.model_config,<br>            \"first_content_at\": self.first_content_at,<br>        }<br>``` |\n\n### SpeechGroupSpanData\n\nBases: `SpanData`\n\nRepresents a Speech Group Span in the trace.\n\nSource code in `src/agents/tracing/span_data.py`\n\n|     |     |\n| --- | --- |\n| ```<br>326<br>327<br>328<br>329<br>330<br>331<br>332<br>333<br>334<br>335<br>336<br>337<br>338<br>339<br>340<br>341<br>342<br>343<br>344<br>345<br>346<br>347<br>``` | ```md-code__content<br>class SpeechGroupSpanData(SpanData):<br>    \"\"\"<br>    Represents a Speech Group Span in the trace.<br>    \"\"\"<br>    __slots__ = \"input\"<br>    def __init__(<br>        self,<br>        input: str | None = None,<br>    ):<br>        self.input = input<br>    @property<br>    def type(self) -> str:<br>        return \"speech_group\"<br>    def export(self) -> dict[str, Any]:<br>        return {<br>            \"type\": self.type,<br>            \"input\": self.input,<br>        }<br>``` |\n\n### MCPListToolsSpanData\n\nBases: `SpanData`\n\nRepresents an MCP List Tools Span in the trace.\nIncludes server and result.\n\nSource code in `src/agents/tracing/span_data.py`\n\n|     |     |\n| --- | --- |\n| ```<br>350<br>351<br>352<br>353<br>354<br>355<br>356<br>357<br>358<br>359<br>360<br>361<br>362<br>363<br>364<br>365<br>366<br>367<br>368<br>369<br>370<br>371<br>372<br>373<br>374<br>``` | ```md-code__content<br>class MCPListToolsSpanData(SpanData):<br>    \"\"\"<br>    Represents an MCP List Tools Span in the trace.<br>    Includes server and result.<br>    \"\"\"<br>    __slots__ = (<br>        \"server\",<br>        \"result\",<br>    )<br>    def __init__(self, server: str | None = None, result: list[str] | None = None):<br>        self.server = server<br>        self.result = result<br>    @property<br>    def type(self) -> str:<br>        return \"mcp_tools\"<br>    def export(self) -> dict[str, Any]:<br>        return {<br>            \"type\": self.type,<br>            \"server\": self.server,<br>            \"result\": self.result,<br>        }<br>``` |",
  "metadata": {
    "favicon": "https://openai.github.io/openai-agents-python/images/favicon-platform.svg",
    "viewport": "width=device-width,initial-scale=1",
    "title": "Span data - OpenAI Agents SDK",
    "language": "en",
    "generator": "mkdocs-1.6.1, mkdocs-material-9.6.11",
    "scrapeId": "63f681e5-b87a-403f-9e8f-1408d31a2c13",
    "sourceURL": "https://openai.github.io/openai-agents-python/ref/tracing/span_data/",
    "url": "https://openai.github.io/openai-agents-python/ref/tracing/span_data/",
    "statusCode": 200,
    "contentType": "text/html; charset=utf-8",
    "proxyUsed": "basic"
  }
}