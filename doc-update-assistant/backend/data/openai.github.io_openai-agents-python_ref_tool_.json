{
  "markdown": "[Skip to content](https://openai.github.io/openai-agents-python/ref/tool/#tools)\n\n# `Tools`\n\n### MCPToolApprovalFunction`module-attribute`\n\n```md-code__content\nMCPToolApprovalFunction = Callable[\\\n    [MCPToolApprovalRequest],\\\n    MaybeAwaitable[MCPToolApprovalFunctionResult],\\\n]\n\n```\n\nA function that approves or rejects a tool call.\n\n### LocalShellExecutor`module-attribute`\n\n```md-code__content\nLocalShellExecutor = Callable[\\\n    [LocalShellCommandRequest], MaybeAwaitable[str]\\\n]\n\n```\n\nA function that executes a command on a shell.\n\n### Tool`module-attribute`\n\n```md-code__content\nTool = Union[\\\n    FunctionTool,\\\n    FileSearchTool,\\\n    WebSearchTool,\\\n    ComputerTool,\\\n    HostedMCPTool,\\\n    LocalShellTool,\\\n    ImageGenerationTool,\\\n    CodeInterpreterTool,\\\n]\n\n```\n\nA tool that can be used in an agent.\n\n### FunctionToolResult`dataclass`\n\nSource code in `src/agents/tool.py`\n\n|     |     |\n| --- | --- |\n| ```<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>``` | ```md-code__content<br>@dataclass<br>class FunctionToolResult:<br>    tool: FunctionTool<br>    \"\"\"The tool that was run.\"\"\"<br>    output: Any<br>    \"\"\"The output of the tool.\"\"\"<br>    run_item: RunItem<br>    \"\"\"The run item that was produced as a result of the tool call.\"\"\"<br>``` |\n\n#### tool`instance-attribute`\n\n```md-code__content\ntool: FunctionTool\n\n```\n\nThe tool that was run.\n\n#### output`instance-attribute`\n\n```md-code__content\noutput: Any\n\n```\n\nThe output of the tool.\n\n#### run\\_item`instance-attribute`\n\n```md-code__content\nrun_item: RunItem\n\n```\n\nThe run item that was produced as a result of the tool call.\n\n### FunctionTool`dataclass`\n\nA tool that wraps a function. In most cases, you should use the `function_tool` helpers to\ncreate a FunctionTool, as they let you easily wrap a Python function.\n\nSource code in `src/agents/tool.py`\n\n|     |     |\n| --- | --- |\n| ```<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>83<br>84<br>85<br>86<br>87<br>88<br>89<br>``` | ```md-code__content<br>@dataclass<br>class FunctionTool:<br>    \"\"\"A tool that wraps a function. In most cases, you should use  the `function_tool` helpers to<br>    create a FunctionTool, as they let you easily wrap a Python function.<br>    \"\"\"<br>    name: str<br>    \"\"\"The name of the tool, as shown to the LLM. Generally the name of the function.\"\"\"<br>    description: str<br>    \"\"\"A description of the tool, as shown to the LLM.\"\"\"<br>    params_json_schema: dict[str, Any]<br>    \"\"\"The JSON schema for the tool's parameters.\"\"\"<br>    on_invoke_tool: Callable[[ToolContext[Any], str], Awaitable[Any]]<br>    \"\"\"A function that invokes the tool with the given context and parameters. The params passed<br>    are:<br>    1. The tool run context.<br>    2. The arguments from the LLM, as a JSON string.<br>    You must return a string representation of the tool output, or something we can call `str()` on.<br>    In case of errors, you can either raise an Exception (which will cause the run to fail) or<br>    return a string error message (which will be sent back to the LLM).<br>    \"\"\"<br>    strict_json_schema: bool = True<br>    \"\"\"Whether the JSON schema is in strict mode. We **strongly** recommend setting this to True,<br>    as it increases the likelihood of correct JSON input.\"\"\"<br>    is_enabled: bool | Callable[[RunContextWrapper[Any], Agent[Any]], MaybeAwaitable[bool]] = True<br>    \"\"\"Whether the tool is enabled. Either a bool or a Callable that takes the run context and agent<br>    and returns whether the tool is enabled. You can use this to dynamically enable/disable a tool<br>    based on your context/state.\"\"\"<br>``` |\n\n#### name`instance-attribute`\n\n```md-code__content\nname: str\n\n```\n\nThe name of the tool, as shown to the LLM. Generally the name of the function.\n\n#### description`instance-attribute`\n\n```md-code__content\ndescription: str\n\n```\n\nA description of the tool, as shown to the LLM.\n\n#### params\\_json\\_schema`instance-attribute`\n\n```md-code__content\nparams_json_schema: dict[str, Any]\n\n```\n\nThe JSON schema for the tool's parameters.\n\n#### on\\_invoke\\_tool`instance-attribute`\n\n```md-code__content\non_invoke_tool: Callable[\\\n    [ToolContext[Any], str], Awaitable[Any]\\\n]\n\n```\n\nA function that invokes the tool with the given context and parameters. The params passed\nare:\n1\\. The tool run context.\n2\\. The arguments from the LLM, as a JSON string.\n\nYou must return a string representation of the tool output, or something we can call `str()` on.\nIn case of errors, you can either raise an Exception (which will cause the run to fail) or\nreturn a string error message (which will be sent back to the LLM).\n\n#### strict\\_json\\_schema`class-attribute``instance-attribute`\n\n```md-code__content\nstrict_json_schema: bool = True\n\n```\n\nWhether the JSON schema is in strict mode. We **strongly** recommend setting this to True,\nas it increases the likelihood of correct JSON input.\n\n#### is\\_enabled`class-attribute``instance-attribute`\n\n```md-code__content\nis_enabled: (\n    bool\n    | Callable[\\\n        [RunContextWrapper[Any], Agent[Any]],\\\n        MaybeAwaitable[bool],\\\n    ]\n) = True\n\n```\n\nWhether the tool is enabled. Either a bool or a Callable that takes the run context and agent\nand returns whether the tool is enabled. You can use this to dynamically enable/disable a tool\nbased on your context/state.\n\n### FileSearchTool`dataclass`\n\nA hosted tool that lets the LLM search through a vector store. Currently only supported with\nOpenAI models, using the Responses API.\n\nSource code in `src/agents/tool.py`\n\n|     |     |\n| --- | --- |\n| ```<br> 92<br> 93<br> 94<br> 95<br> 96<br> 97<br> 98<br> 99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>``` | ```md-code__content<br>@dataclass<br>class FileSearchTool:<br>    \"\"\"A hosted tool that lets the LLM search through a vector store. Currently only supported with<br>    OpenAI models, using the Responses API.<br>    \"\"\"<br>    vector_store_ids: list[str]<br>    \"\"\"The IDs of the vector stores to search.\"\"\"<br>    max_num_results: int | None = None<br>    \"\"\"The maximum number of results to return.\"\"\"<br>    include_search_results: bool = False<br>    \"\"\"Whether to include the search results in the output produced by the LLM.\"\"\"<br>    ranking_options: RankingOptions | None = None<br>    \"\"\"Ranking options for search.\"\"\"<br>    filters: Filters | None = None<br>    \"\"\"A filter to apply based on file attributes.\"\"\"<br>    @property<br>    def name(self):<br>        return \"file_search\"<br>``` |\n\n#### vector\\_store\\_ids`instance-attribute`\n\n```md-code__content\nvector_store_ids: list[str]\n\n```\n\nThe IDs of the vector stores to search.\n\n#### max\\_num\\_results`class-attribute``instance-attribute`\n\n```md-code__content\nmax_num_results: int | None = None\n\n```\n\nThe maximum number of results to return.\n\n#### include\\_search\\_results`class-attribute``instance-attribute`\n\n```md-code__content\ninclude_search_results: bool = False\n\n```\n\nWhether to include the search results in the output produced by the LLM.\n\n#### ranking\\_options`class-attribute``instance-attribute`\n\n```md-code__content\nranking_options: RankingOptions | None = None\n\n```\n\nRanking options for search.\n\n#### filters`class-attribute``instance-attribute`\n\n```md-code__content\nfilters: Filters | None = None\n\n```\n\nA filter to apply based on file attributes.\n\n### WebSearchTool`dataclass`\n\nA hosted tool that lets the LLM search the web. Currently only supported with OpenAI models,\nusing the Responses API.\n\nSource code in `src/agents/tool.py`\n\n|     |     |\n| --- | --- |\n| ```<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>``` | ```md-code__content<br>@dataclass<br>class WebSearchTool:<br>    \"\"\"A hosted tool that lets the LLM search the web. Currently only supported with OpenAI models,<br>    using the Responses API.<br>    \"\"\"<br>    user_location: UserLocation | None = None<br>    \"\"\"Optional location for the search. Lets you customize results to be relevant to a location.\"\"\"<br>    search_context_size: Literal[\"low\", \"medium\", \"high\"] = \"medium\"<br>    \"\"\"The amount of context to use for the search.\"\"\"<br>    @property<br>    def name(self):<br>        return \"web_search_preview\"<br>``` |\n\n#### user\\_location`class-attribute``instance-attribute`\n\n```md-code__content\nuser_location: UserLocation | None = None\n\n```\n\nOptional location for the search. Lets you customize results to be relevant to a location.\n\n#### search\\_context\\_size`class-attribute``instance-attribute`\n\n```md-code__content\nsearch_context_size: Literal[\"low\", \"medium\", \"high\"] = (\n    \"medium\"\n)\n\n```\n\nThe amount of context to use for the search.\n\n### ComputerTool`dataclass`\n\nA hosted tool that lets the LLM control a computer.\n\nSource code in `src/agents/tool.py`\n\n|     |     |\n| --- | --- |\n| ```<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>``` | ```md-code__content<br>@dataclass<br>class ComputerTool:<br>    \"\"\"A hosted tool that lets the LLM control a computer.\"\"\"<br>    computer: Computer | AsyncComputer<br>    \"\"\"The computer implementation, which describes the environment and dimensions of the computer,<br>    as well as implements the computer actions like click, screenshot, etc.<br>    \"\"\"<br>    @property<br>    def name(self):<br>        return \"computer_use_preview\"<br>``` |\n\n#### computer`instance-attribute`\n\n```md-code__content\ncomputer: Computer | AsyncComputer\n\n```\n\nThe computer implementation, which describes the environment and dimensions of the computer,\nas well as implements the computer actions like click, screenshot, etc.\n\n### MCPToolApprovalRequest`dataclass`\n\nA request to approve a tool call.\n\nSource code in `src/agents/tool.py`\n\n|     |     |\n| --- | --- |\n| ```<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>``` | ```md-code__content<br>@dataclass<br>class MCPToolApprovalRequest:<br>    \"\"\"A request to approve a tool call.\"\"\"<br>    ctx_wrapper: RunContextWrapper[Any]<br>    \"\"\"The run context.\"\"\"<br>    data: McpApprovalRequest<br>    \"\"\"The data from the MCP tool approval request.\"\"\"<br>``` |\n\n#### ctx\\_wrapper`instance-attribute`\n\n```md-code__content\nctx_wrapper: RunContextWrapper[Any]\n\n```\n\nThe run context.\n\n#### data`instance-attribute`\n\n```md-code__content\ndata: McpApprovalRequest\n\n```\n\nThe data from the MCP tool approval request.\n\n### MCPToolApprovalFunctionResult\n\nBases: `TypedDict`\n\nThe result of an MCP tool approval function.\n\nSource code in `src/agents/tool.py`\n\n|     |     |\n| --- | --- |\n| ```<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>``` | ```md-code__content<br>class MCPToolApprovalFunctionResult(TypedDict):<br>    \"\"\"The result of an MCP tool approval function.\"\"\"<br>    approve: bool<br>    \"\"\"Whether to approve the tool call.\"\"\"<br>    reason: NotRequired[str]<br>    \"\"\"An optional reason, if rejected.\"\"\"<br>``` |\n\n#### approve`instance-attribute`\n\n```md-code__content\napprove: bool\n\n```\n\nWhether to approve the tool call.\n\n#### reason`instance-attribute`\n\n```md-code__content\nreason: NotRequired[str]\n\n```\n\nAn optional reason, if rejected.\n\n### HostedMCPTool`dataclass`\n\nA tool that allows the LLM to use a remote MCP server. The LLM will automatically list and\ncall tools, without requiring a a round trip back to your code.\nIf you want to run MCP servers locally via stdio, in a VPC or other non-publicly-accessible\nenvironment, or you just prefer to run tool calls locally, then you can instead use the servers\nin `agents.mcp` and pass `Agent(mcp_servers=[...])` to the agent.\n\nSource code in `src/agents/tool.py`\n\n|     |     |\n| --- | --- |\n| ```<br>176<br>177<br>178<br>179<br>180<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>189<br>190<br>191<br>192<br>193<br>194<br>``` | ```md-code__content<br>@dataclass<br>class HostedMCPTool:<br>    \"\"\"A tool that allows the LLM to use a remote MCP server. The LLM will automatically list and<br>    call tools, without requiring a a round trip back to your code.<br>    If you want to run MCP servers locally via stdio, in a VPC or other non-publicly-accessible<br>    environment, or you just prefer to run tool calls locally, then you can instead use the servers<br>    in `agents.mcp` and pass `Agent(mcp_servers=[...])` to the agent.\"\"\"<br>    tool_config: Mcp<br>    \"\"\"The MCP tool config, which includes the server URL and other settings.\"\"\"<br>    on_approval_request: MCPToolApprovalFunction | None = None<br>    \"\"\"An optional function that will be called if approval is requested for an MCP tool. If not<br>    provided, you will need to manually add approvals/rejections to the input and call<br>    `Runner.run(...)` again.\"\"\"<br>    @property<br>    def name(self):<br>        return \"hosted_mcp\"<br>``` |\n\n#### tool\\_config`instance-attribute`\n\n```md-code__content\ntool_config: Mcp\n\n```\n\nThe MCP tool config, which includes the server URL and other settings.\n\n#### on\\_approval\\_request`class-attribute``instance-attribute`\n\n```md-code__content\non_approval_request: MCPToolApprovalFunction | None = None\n\n```\n\nAn optional function that will be called if approval is requested for an MCP tool. If not\nprovided, you will need to manually add approvals/rejections to the input and call\n`Runner.run(...)` again.\n\n### CodeInterpreterTool`dataclass`\n\nA tool that allows the LLM to execute code in a sandboxed environment.\n\nSource code in `src/agents/tool.py`\n\n|     |     |\n| --- | --- |\n| ```<br>197<br>198<br>199<br>200<br>201<br>202<br>203<br>204<br>205<br>206<br>``` | ```md-code__content<br>@dataclass<br>class CodeInterpreterTool:<br>    \"\"\"A tool that allows the LLM to execute code in a sandboxed environment.\"\"\"<br>    tool_config: CodeInterpreter<br>    \"\"\"The tool config, which includes the container and other settings.\"\"\"<br>    @property<br>    def name(self):<br>        return \"code_interpreter\"<br>``` |\n\n#### tool\\_config`instance-attribute`\n\n```md-code__content\ntool_config: CodeInterpreter\n\n```\n\nThe tool config, which includes the container and other settings.\n\n### ImageGenerationTool`dataclass`\n\nA tool that allows the LLM to generate images.\n\nSource code in `src/agents/tool.py`\n\n|     |     |\n| --- | --- |\n| ```<br>209<br>210<br>211<br>212<br>213<br>214<br>215<br>216<br>217<br>218<br>``` | ```md-code__content<br>@dataclass<br>class ImageGenerationTool:<br>    \"\"\"A tool that allows the LLM to generate images.\"\"\"<br>    tool_config: ImageGeneration<br>    \"\"\"The tool config, which image generation settings.\"\"\"<br>    @property<br>    def name(self):<br>        return \"image_generation\"<br>``` |\n\n#### tool\\_config`instance-attribute`\n\n```md-code__content\ntool_config: ImageGeneration\n\n```\n\nThe tool config, which image generation settings.\n\n### LocalShellCommandRequest`dataclass`\n\nA request to execute a command on a shell.\n\nSource code in `src/agents/tool.py`\n\n|     |     |\n| --- | --- |\n| ```<br>221<br>222<br>223<br>224<br>225<br>226<br>227<br>228<br>229<br>``` | ```md-code__content<br>@dataclass<br>class LocalShellCommandRequest:<br>    \"\"\"A request to execute a command on a shell.\"\"\"<br>    ctx_wrapper: RunContextWrapper[Any]<br>    \"\"\"The run context.\"\"\"<br>    data: LocalShellCall<br>    \"\"\"The data from the local shell tool call.\"\"\"<br>``` |\n\n#### ctx\\_wrapper`instance-attribute`\n\n```md-code__content\nctx_wrapper: RunContextWrapper[Any]\n\n```\n\nThe run context.\n\n#### data`instance-attribute`\n\n```md-code__content\ndata: LocalShellCall\n\n```\n\nThe data from the local shell tool call.\n\n### LocalShellTool`dataclass`\n\nA tool that allows the LLM to execute commands on a shell.\n\nSource code in `src/agents/tool.py`\n\n|     |     |\n| --- | --- |\n| ```<br>236<br>237<br>238<br>239<br>240<br>241<br>242<br>243<br>244<br>245<br>``` | ```md-code__content<br>@dataclass<br>class LocalShellTool:<br>    \"\"\"A tool that allows the LLM to execute commands on a shell.\"\"\"<br>    executor: LocalShellExecutor<br>    \"\"\"A function that executes a command on a shell.\"\"\"<br>    @property<br>    def name(self):<br>        return \"local_shell\"<br>``` |\n\n#### executor`instance-attribute`\n\n```md-code__content\nexecutor: LocalShellExecutor\n\n```\n\nA function that executes a command on a shell.\n\n### default\\_tool\\_error\\_function\n\n```md-code__content\ndefault_tool_error_function(\n    ctx: RunContextWrapper[Any], error: Exception\n) -> str\n\n```\n\nThe default tool error function, which just returns a generic error message.\n\nSource code in `src/agents/tool.py`\n\n|     |     |\n| --- | --- |\n| ```<br>261<br>262<br>263<br>``` | ```md-code__content<br>def default_tool_error_function(ctx: RunContextWrapper[Any], error: Exception) -> str:<br>    \"\"\"The default tool error function, which just returns a generic error message.\"\"\"<br>    return f\"An error occurred while running the tool. Please try again. Error: {str(error)}\"<br>``` |\n\n### function\\_tool\n\n```md-code__content\nfunction_tool(\n    func: ToolFunction[...],\n    *,\n    name_override: str | None = None,\n    description_override: str | None = None,\n    docstring_style: DocstringStyle | None = None,\n    use_docstring_info: bool = True,\n    failure_error_function: ToolErrorFunction | None = None,\n    strict_mode: bool = True,\n    is_enabled: bool\n    | Callable[\\\n        [RunContextWrapper[Any], Agent[Any]],\\\n        MaybeAwaitable[bool],\\\n    ] = True,\n) -> FunctionTool\n\n```\n\n```md-code__content\nfunction_tool(\n    *,\n    name_override: str | None = None,\n    description_override: str | None = None,\n    docstring_style: DocstringStyle | None = None,\n    use_docstring_info: bool = True,\n    failure_error_function: ToolErrorFunction | None = None,\n    strict_mode: bool = True,\n    is_enabled: bool\n    | Callable[\\\n        [RunContextWrapper[Any], Agent[Any]],\\\n        MaybeAwaitable[bool],\\\n    ] = True,\n) -> Callable[[ToolFunction[...]], FunctionTool]\n\n```\n\n```md-code__content\nfunction_tool(\n    func: ToolFunction[...] | None = None,\n    *,\n    name_override: str | None = None,\n    description_override: str | None = None,\n    docstring_style: DocstringStyle | None = None,\n    use_docstring_info: bool = True,\n    failure_error_function: ToolErrorFunction\n    | None = default_tool_error_function,\n    strict_mode: bool = True,\n    is_enabled: bool\n    | Callable[\\\n        [RunContextWrapper[Any], Agent[Any]],\\\n        MaybeAwaitable[bool],\\\n    ] = True,\n) -> (\n    FunctionTool\n    | Callable[[ToolFunction[...]], FunctionTool]\n)\n\n```\n\nDecorator to create a FunctionTool from a function. By default, we will:\n1\\. Parse the function signature to create a JSON schema for the tool's parameters.\n2\\. Use the function's docstring to populate the tool's description.\n3\\. Use the function's docstring to populate argument descriptions.\nThe docstring style is detected automatically, but you can override it.\n\nIf the function takes a `RunContextWrapper` as the first argument, it _must_ match the\ncontext type of the agent that uses the tool.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `func` | `ToolFunction[...] | None` | The function to wrap. | `None` |\n| `name_override` | `str | None` | If provided, use this name for the tool instead of the function's name. | `None` |\n| `description_override` | `str | None` | If provided, use this description for the tool instead of the<br>function's docstring. | `None` |\n| `docstring_style` | `DocstringStyle | None` | If provided, use this style for the tool's docstring. If not provided,<br>we will attempt to auto-detect the style. | `None` |\n| `use_docstring_info` | `bool` | If True, use the function's docstring to populate the tool's<br>description and argument descriptions. | `True` |\n| `failure_error_function` | `ToolErrorFunction | None` | If provided, use this function to generate an error message when<br>the tool call fails. The error message is sent to the LLM. If you pass None, then no<br>error message will be sent and instead an Exception will be raised. | `default_tool_error_function` |\n| `strict_mode` | `bool` | Whether to enable strict mode for the tool's JSON schema. We _strongly_<br>recommend setting this to True, as it increases the likelihood of correct JSON input.<br>If False, it allows non-strict JSON schemas. For example, if a parameter has a default<br>value, it will be optional, additional properties are allowed, etc. See here for more:<br>https://platform.openai.com/docs/guides/structured-outputs?api-mode=responses#supported-schemas | `True` |\n| `is_enabled` | `bool | Callable[[RunContextWrapper[Any], Agent[Any]], MaybeAwaitable[bool]]` | Whether the tool is enabled. Can be a bool or a callable that takes the run<br>context and agent and returns whether the tool is enabled. Disabled tools are hidden<br>from the LLM at runtime. | `True` |\n\nSource code in `src/agents/tool.py`\n\n|     |     |\n| --- | --- |\n| ```<br>300<br>301<br>302<br>303<br>304<br>305<br>306<br>307<br>308<br>309<br>310<br>311<br>312<br>313<br>314<br>315<br>316<br>317<br>318<br>319<br>320<br>321<br>322<br>323<br>324<br>325<br>326<br>327<br>328<br>329<br>330<br>331<br>332<br>333<br>334<br>335<br>336<br>337<br>338<br>339<br>340<br>341<br>342<br>343<br>344<br>345<br>346<br>347<br>348<br>349<br>350<br>351<br>352<br>353<br>354<br>355<br>356<br>357<br>358<br>359<br>360<br>361<br>362<br>363<br>364<br>365<br>366<br>367<br>368<br>369<br>370<br>371<br>372<br>373<br>374<br>375<br>376<br>377<br>378<br>379<br>380<br>381<br>382<br>383<br>384<br>385<br>386<br>387<br>388<br>389<br>390<br>391<br>392<br>393<br>394<br>395<br>396<br>397<br>398<br>399<br>400<br>401<br>402<br>403<br>404<br>405<br>406<br>407<br>408<br>409<br>410<br>411<br>412<br>413<br>414<br>415<br>416<br>417<br>418<br>419<br>420<br>421<br>422<br>423<br>424<br>425<br>426<br>427<br>428<br>429<br>430<br>431<br>432<br>433<br>434<br>435<br>436<br>437<br>438<br>439<br>440<br>441<br>``` | ```md-code__content<br>def function_tool(<br>    func: ToolFunction[...] | None = None,<br>    *,<br>    name_override: str | None = None,<br>    description_override: str | None = None,<br>    docstring_style: DocstringStyle | None = None,<br>    use_docstring_info: bool = True,<br>    failure_error_function: ToolErrorFunction | None = default_tool_error_function,<br>    strict_mode: bool = True,<br>    is_enabled: bool | Callable[[RunContextWrapper[Any], Agent[Any]], MaybeAwaitable[bool]] = True,<br>) -> FunctionTool | Callable[[ToolFunction[...]], FunctionTool]:<br>    \"\"\"<br>    Decorator to create a FunctionTool from a function. By default, we will:<br>    1. Parse the function signature to create a JSON schema for the tool's parameters.<br>    2. Use the function's docstring to populate the tool's description.<br>    3. Use the function's docstring to populate argument descriptions.<br>    The docstring style is detected automatically, but you can override it.<br>    If the function takes a `RunContextWrapper` as the first argument, it *must* match the<br>    context type of the agent that uses the tool.<br>    Args:<br>        func: The function to wrap.<br>        name_override: If provided, use this name for the tool instead of the function's name.<br>        description_override: If provided, use this description for the tool instead of the<br>            function's docstring.<br>        docstring_style: If provided, use this style for the tool's docstring. If not provided,<br>            we will attempt to auto-detect the style.<br>        use_docstring_info: If True, use the function's docstring to populate the tool's<br>            description and argument descriptions.<br>        failure_error_function: If provided, use this function to generate an error message when<br>            the tool call fails. The error message is sent to the LLM. If you pass None, then no<br>            error message will be sent and instead an Exception will be raised.<br>        strict_mode: Whether to enable strict mode for the tool's JSON schema. We *strongly*<br>            recommend setting this to True, as it increases the likelihood of correct JSON input.<br>            If False, it allows non-strict JSON schemas. For example, if a parameter has a default<br>            value, it will be optional, additional properties are allowed, etc. See here for more:<br>            https://platform.openai.com/docs/guides/structured-outputs?api-mode=responses#supported-schemas<br>        is_enabled: Whether the tool is enabled. Can be a bool or a callable that takes the run<br>            context and agent and returns whether the tool is enabled. Disabled tools are hidden<br>            from the LLM at runtime.<br>    \"\"\"<br>    def _create_function_tool(the_func: ToolFunction[...]) -> FunctionTool:<br>        schema = function_schema(<br>            func=the_func,<br>            name_override=name_override,<br>            description_override=description_override,<br>            docstring_style=docstring_style,<br>            use_docstring_info=use_docstring_info,<br>            strict_json_schema=strict_mode,<br>        )<br>        async def _on_invoke_tool_impl(ctx: ToolContext[Any], input: str) -> Any:<br>            try:<br>                json_data: dict[str, Any] = json.loads(input) if input else {}<br>            except Exception as e:<br>                if _debug.DONT_LOG_TOOL_DATA:<br>                    logger.debug(f\"Invalid JSON input for tool {schema.name}\")<br>                else:<br>                    logger.debug(f\"Invalid JSON input for tool {schema.name}: {input}\")<br>                raise ModelBehaviorError(<br>                    f\"Invalid JSON input for tool {schema.name}: {input}\"<br>                ) from e<br>            if _debug.DONT_LOG_TOOL_DATA:<br>                logger.debug(f\"Invoking tool {schema.name}\")<br>            else:<br>                logger.debug(f\"Invoking tool {schema.name} with input {input}\")<br>            try:<br>                parsed = (<br>                    schema.params_pydantic_model(**json_data)<br>                    if json_data<br>                    else schema.params_pydantic_model()<br>                )<br>            except ValidationError as e:<br>                raise ModelBehaviorError(f\"Invalid JSON input for tool {schema.name}: {e}\") from e<br>            args, kwargs_dict = schema.to_call_args(parsed)<br>            if not _debug.DONT_LOG_TOOL_DATA:<br>                logger.debug(f\"Tool call args: {args}, kwargs: {kwargs_dict}\")<br>            if inspect.iscoroutinefunction(the_func):<br>                if schema.takes_context:<br>                    result = await the_func(ctx, *args, **kwargs_dict)<br>                else:<br>                    result = await the_func(*args, **kwargs_dict)<br>            else:<br>                if schema.takes_context:<br>                    result = the_func(ctx, *args, **kwargs_dict)<br>                else:<br>                    result = the_func(*args, **kwargs_dict)<br>            if _debug.DONT_LOG_TOOL_DATA:<br>                logger.debug(f\"Tool {schema.name} completed.\")<br>            else:<br>                logger.debug(f\"Tool {schema.name} returned {result}\")<br>            return result<br>        async def _on_invoke_tool(ctx: ToolContext[Any], input: str) -> Any:<br>            try:<br>                return await _on_invoke_tool_impl(ctx, input)<br>            except Exception as e:<br>                if failure_error_function is None:<br>                    raise<br>                result = failure_error_function(ctx, e)<br>                if inspect.isawaitable(result):<br>                    return await result<br>                _error_tracing.attach_error_to_current_span(<br>                    SpanError(<br>                        message=\"Error running tool (non-fatal)\",<br>                        data={<br>                            \"tool_name\": schema.name,<br>                            \"error\": str(e),<br>                        },<br>                    )<br>                )<br>                return result<br>        return FunctionTool(<br>            name=schema.name,<br>            description=schema.description or \"\",<br>            params_json_schema=schema.params_json_schema,<br>            on_invoke_tool=_on_invoke_tool,<br>            strict_json_schema=strict_mode,<br>            is_enabled=is_enabled,<br>        )<br>    # If func is actually a callable, we were used as @function_tool with no parentheses<br>    if callable(func):<br>        return _create_function_tool(func)<br>    # Otherwise, we were used as @function_tool(...), so return a decorator<br>    def decorator(real_func: ToolFunction[...]) -> FunctionTool:<br>        return _create_function_tool(real_func)<br>    return decorator<br>``` |",
  "metadata": {
    "title": "Tools - OpenAI Agents SDK",
    "language": "en",
    "viewport": "width=device-width,initial-scale=1",
    "favicon": "https://openai.github.io/openai-agents-python/images/favicon-platform.svg",
    "generator": "mkdocs-1.6.1, mkdocs-material-9.6.11",
    "scrapeId": "ced9334d-6c04-4e08-8bf1-530125139299",
    "sourceURL": "https://openai.github.io/openai-agents-python/ref/tool/",
    "url": "https://openai.github.io/openai-agents-python/ref/tool/",
    "statusCode": 200,
    "contentType": "text/html; charset=utf-8",
    "proxyUsed": "basic"
  }
}