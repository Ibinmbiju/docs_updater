{
  "markdown": "[コンテンツにスキップ](https://openai.github.io/openai-agents-python/ja/handoffs/#_1)\n\n# ハンドオフ\n\nハンドオフを使用すると、エージェント がタスクを別の エージェント に委譲できます。これは、複数の エージェント がそれぞれ異なる分野を専門とするシナリオで特に便利です。たとえばカスタマーサポートアプリでは、注文状況、返金、 FAQ などのタスクを個別に担当する エージェント を用意できます。\n\nハンドオフは LLM からはツールとして認識されます。そのため、 `Refund Agent` という エージェント へのハンドオフであれば、ツール名は `transfer_to_refund_agent` になります。\n\n## ハンドオフの作成\n\nすべての エージェント には [`handoffs`](https://openai.github.io/openai-agents-python/ref/agent/#agents.agent.Agent.handoffs \"handoffs            class-attribute       instance-attribute   \") パラメーターがあり、直接 `Agent` を渡すことも、ハンドオフをカスタマイズする `Handoff` オブジェクトを渡すこともできます。\n\nAgents SDK が提供する [`handoff()`](https://openai.github.io/openai-agents-python/ref/handoffs/#agents.handoffs.handoff \"handoff\") 関数を使ってハンドオフを作成できます。この関数では、引き継ぎ先の エージェント を指定し、オーバーライドや入力フィルターをオプションで設定できます。\n\n### 基本的な使い方\n\nシンプルなハンドオフを作成する例を示します。\n\n```md-code__content\nfrom agents import Agent, handoff\n\nbilling_agent = Agent(name=\"Billing agent\")\nrefund_agent = Agent(name=\"Refund agent\")\n\ntriage_agent = Agent(name=\"Triage agent\", handoffs=[billing_agent, handoff(refund_agent)])\n\n```\n\n### `handoff()` 関数によるハンドオフのカスタマイズ\n\n[`handoff()`](https://openai.github.io/openai-agents-python/ref/handoffs/#agents.handoffs.handoff \"handoff\") 関数を使うと、ハンドオフを細かくカスタマイズできます。\n\n- `agent`: ここで指定した エージェント に処理が引き渡されます。\n- `tool_name_override`: デフォルトでは `Handoff.default_tool_name()` が使用され、 `transfer_to_<agent_name>` という名前になります。これを上書きできます。\n- `tool_description_override`: `Handoff.default_tool_description()` が返すデフォルトのツール説明を上書きします。\n- `on_handoff`: ハンドオフ実行時に呼び出されるコールバック関数です。ハンドオフが呼ばれたタイミングでデータ取得を開始するなどに便利です。この関数は エージェント のコンテキストを受け取り、オプションで LLM が生成した入力も受け取れます。渡されるデータは `input_type` パラメーターで制御します。\n- `input_type`: ハンドオフが受け取る入力の型（任意）。\n- `input_filter`: 次の エージェント が受け取る入力をフィルタリングできます。詳細は後述します。\n\n```md-code__content\nfrom agents import Agent, handoff, RunContextWrapper\n\ndef on_handoff(ctx: RunContextWrapper[None]):\n    print(\"Handoff called\")\n\nagent = Agent(name=\"My agent\")\n\nhandoff_obj = handoff(\n    agent=agent,\n    on_handoff=on_handoff,\n    tool_name_override=\"custom_handoff_tool\",\n    tool_description_override=\"Custom description\",\n)\n\n```\n\n## ハンドオフ入力\n\n場合によっては、 LLM がハンドオフを呼び出す際に追加のデータを渡してほしいことがあります。たとえば「Escalation エージェント」へのハンドオフでは、ログ用に理由を渡してもらいたいかもしれません。\n\n```md-code__content\nfrom pydantic import BaseModel\n\nfrom agents import Agent, handoff, RunContextWrapper\n\nclass EscalationData(BaseModel):\n    reason: str\n\nasync def on_handoff(ctx: RunContextWrapper[None], input_data: EscalationData):\n    print(f\"Escalation agent called with reason: {input_data.reason}\")\n\nagent = Agent(name=\"Escalation agent\")\n\nhandoff_obj = handoff(\n    agent=agent,\n    on_handoff=on_handoff,\n    input_type=EscalationData,\n)\n\n```\n\n## 入力フィルター\n\nハンドオフが発生すると、新しい エージェント が会話を引き継ぎ、これまでの会話履歴全体を閲覧できる状態になります。これを変更したい場合は [`input_filter`](https://openai.github.io/openai-agents-python/ref/handoffs/#agents.handoffs.Handoff.input_filter \"input_filter            class-attribute       instance-attribute   \") を設定してください。入力フィルターは、 [`HandoffInputData`](https://openai.github.io/openai-agents-python/ref/handoffs/#agents.handoffs.HandoffInputData \"HandoffInputData            dataclass   \") として渡される既存の入力を受け取り、新しい `HandoffInputData` を返す関数です。\n\nよくあるパターン（たとえば履歴からすべてのツール呼び出しを削除するなど）は [`agents.extensions.handoff_filters`](https://openai.github.io/openai-agents-python/ref/extensions/handoff_filters/#agents.extensions.handoff_filters) に実装済みです。\n\n```md-code__content\nfrom agents import Agent, handoff\nfrom agents.extensions import handoff_filters\n\nagent = Agent(name=\"FAQ agent\")\n\nhandoff_obj = handoff(\n    agent=agent,\n    input_filter=handoff_filters.remove_all_tools,\n)\n\n```\n\n## 推奨プロンプト\n\nLLM がハンドオフを正しく理解できるよう、エージェント にハンドオフに関する情報を含めることを推奨します。事前に用意したプレフィックス [`agents.extensions.handoff_prompt.RECOMMENDED_PROMPT_PREFIX`](https://openai.github.io/openai-agents-python/ref/extensions/handoff_prompt/#agents.extensions.handoff_prompt.RECOMMENDED_PROMPT_PREFIX \"RECOMMENDED_PROMPT_PREFIX            module-attribute   \") を利用するか、 [`agents.extensions.handoff_prompt.prompt_with_handoff_instructions`](https://openai.github.io/openai-agents-python/ref/extensions/handoff_prompt/#agents.extensions.handoff_prompt.prompt_with_handoff_instructions \"prompt_with_handoff_instructions\") を呼び出してプロンプトに推奨情報を自動で追加できます。\n\n```md-code__content\nfrom agents import Agent\nfrom agents.extensions.handoff_prompt import RECOMMENDED_PROMPT_PREFIX\n\nbilling_agent = Agent(\n    name=\"Billing agent\",\n    instructions=f\"\"\"{RECOMMENDED_PROMPT_PREFIX}\n    <Fill in the rest of your prompt here>.\"\"\",\n)\n\n```",
  "metadata": {
    "favicon": "https://openai.github.io/openai-agents-python/images/favicon-platform.svg",
    "viewport": "width=device-width,initial-scale=1",
    "generator": "mkdocs-1.6.1, mkdocs-material-9.6.11",
    "title": "ハンドオフ - OpenAI Agents SDK",
    "language": "ja",
    "scrapeId": "61ead088-d917-4541-ab73-fcae9ee9d938",
    "sourceURL": "https://openai.github.io/openai-agents-python/ja/handoffs/",
    "url": "https://openai.github.io/openai-agents-python/ja/handoffs/",
    "statusCode": 200,
    "contentType": "text/html; charset=utf-8",
    "proxyUsed": "basic"
  }
}