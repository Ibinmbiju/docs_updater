{
  "markdown": "[Skip to content](https://openai.github.io/openai-agents-python/quickstart/#quickstart)\n\n# Quickstart\n\n## Create a project and virtual environment\n\nYou'll only need to do this once.\n\n```md-code__content\nmkdir my_project\ncd my_project\npython -m venv .venv\n\n```\n\n### Activate the virtual environment\n\nDo this every time you start a new terminal session.\n\n```md-code__content\nsource .venv/bin/activate\n\n```\n\n### Install the Agents SDK\n\n```md-code__content\npip install openai-agents # or `uv add openai-agents`, etc\n\n```\n\n### Set an OpenAI API key\n\nIf you don't have one, follow [these instructions](https://platform.openai.com/docs/quickstart#create-and-export-an-api-key) to create an OpenAI API key.\n\n```md-code__content\nexport OPENAI_API_KEY=sk-...\n\n```\n\n## Create your first agent\n\nAgents are defined with instructions, a name, and optional config (such as `model_config`)\n\n```md-code__content\nfrom agents import Agent\n\nagent = Agent(\n    name=\"Math Tutor\",\n    instructions=\"You provide help with math problems. Explain your reasoning at each step and include examples\",\n)\n\n```\n\n## Add a few more agents\n\nAdditional agents can be defined in the same way. `handoff_descriptions` provide additional context for determining handoff routing\n\n```md-code__content\nfrom agents import Agent\n\nhistory_tutor_agent = Agent(\n    name=\"History Tutor\",\n    handoff_description=\"Specialist agent for historical questions\",\n    instructions=\"You provide assistance with historical queries. Explain important events and context clearly.\",\n)\n\nmath_tutor_agent = Agent(\n    name=\"Math Tutor\",\n    handoff_description=\"Specialist agent for math questions\",\n    instructions=\"You provide help with math problems. Explain your reasoning at each step and include examples\",\n)\n\n```\n\n## Define your handoffs\n\nOn each agent, you can define an inventory of outgoing handoff options that the agent can choose from to decide how to make progress on their task.\n\n```md-code__content\ntriage_agent = Agent(\n    name=\"Triage Agent\",\n    instructions=\"You determine which agent to use based on the user's homework question\",\n    handoffs=[history_tutor_agent, math_tutor_agent]\n)\n\n```\n\n## Run the agent orchestration\n\nLet's check that the workflow runs and the triage agent correctly routes between the two specialist agents.\n\n```md-code__content\nfrom agents import Runner\n\nasync def main():\n    result = await Runner.run(triage_agent, \"What is the capital of France?\")\n    print(result.final_output)\n\n```\n\n## Add a guardrail\n\nYou can define custom guardrails to run on the input or output.\n\n```md-code__content\nfrom agents import GuardrailFunctionOutput, Agent, Runner\nfrom pydantic import BaseModel\n\nclass HomeworkOutput(BaseModel):\n    is_homework: bool\n    reasoning: str\n\nguardrail_agent = Agent(\n    name=\"Guardrail check\",\n    instructions=\"Check if the user is asking about homework.\",\n    output_type=HomeworkOutput,\n)\n\nasync def homework_guardrail(ctx, agent, input_data):\n    result = await Runner.run(guardrail_agent, input_data, context=ctx.context)\n    final_output = result.final_output_as(HomeworkOutput)\n    return GuardrailFunctionOutput(\n        output_info=final_output,\n        tripwire_triggered=not final_output.is_homework,\n    )\n\n```\n\n## Put it all together\n\nLet's put it all together and run the entire workflow, using handoffs and the input guardrail.\n\n```md-code__content\nfrom agents import Agent, InputGuardrail, GuardrailFunctionOutput, Runner\nfrom pydantic import BaseModel\nimport asyncio\n\nclass HomeworkOutput(BaseModel):\n    is_homework: bool\n    reasoning: str\n\nguardrail_agent = Agent(\n    name=\"Guardrail check\",\n    instructions=\"Check if the user is asking about homework.\",\n    output_type=HomeworkOutput,\n)\n\nmath_tutor_agent = Agent(\n    name=\"Math Tutor\",\n    handoff_description=\"Specialist agent for math questions\",\n    instructions=\"You provide help with math problems. Explain your reasoning at each step and include examples\",\n)\n\nhistory_tutor_agent = Agent(\n    name=\"History Tutor\",\n    handoff_description=\"Specialist agent for historical questions\",\n    instructions=\"You provide assistance with historical queries. Explain important events and context clearly.\",\n)\n\nasync def homework_guardrail(ctx, agent, input_data):\n    result = await Runner.run(guardrail_agent, input_data, context=ctx.context)\n    final_output = result.final_output_as(HomeworkOutput)\n    return GuardrailFunctionOutput(\n        output_info=final_output,\n        tripwire_triggered=not final_output.is_homework,\n    )\n\ntriage_agent = Agent(\n    name=\"Triage Agent\",\n    instructions=\"You determine which agent to use based on the user's homework question\",\n    handoffs=[history_tutor_agent, math_tutor_agent],\n    input_guardrails=[\\\n        InputGuardrail(guardrail_function=homework_guardrail),\\\n    ],\n)\n\nasync def main():\n    result = await Runner.run(triage_agent, \"who was the first president of the united states?\")\n    print(result.final_output)\n\n    result = await Runner.run(triage_agent, \"what is life\")\n    print(result.final_output)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n\n```\n\n## View your traces\n\nTo review what happened during your agent run, navigate to the [Trace viewer in the OpenAI Dashboard](https://platform.openai.com/traces) to view traces of your agent runs.\n\n## Next steps\n\nLearn how to build more complex agentic flows:\n\n- Learn about how to configure [Agents](https://openai.github.io/openai-agents-python/agents/).\n- Learn about [running agents](https://openai.github.io/openai-agents-python/running_agents/).\n- Learn about [tools](https://openai.github.io/openai-agents-python/tools/), [guardrails](https://openai.github.io/openai-agents-python/guardrails/) and [models](https://openai.github.io/openai-agents-python/models/).",
  "metadata": {
    "title": "Quickstart - OpenAI Agents SDK",
    "viewport": "width=device-width,initial-scale=1",
    "generator": "mkdocs-1.6.1, mkdocs-material-9.6.11",
    "language": "en",
    "favicon": "https://openai.github.io/openai-agents-python/images/favicon-platform.svg",
    "scrapeId": "72a8f6e3-106e-497c-a5e3-26b393f657d2",
    "sourceURL": "https://openai.github.io/openai-agents-python/quickstart/",
    "url": "https://openai.github.io/openai-agents-python/quickstart/",
    "statusCode": 200,
    "contentType": "text/html; charset=utf-8",
    "proxyUsed": "basic"
  }
}