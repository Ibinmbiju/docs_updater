{
  "markdown": "[コンテンツにスキップ](https://openai.github.io/openai-agents-python/ja/tools/#_1)\n\n# ツール\n\nツールはエージェントがアクションを実行できるようにします。たとえばデータの取得、コードの実行、外部 API の呼び出し、さらにはコンピュータ操作などです。Agents SDK には次の 3 種類のツールがあります。\n\n- ホストツール: これらは LLM サーバー上で AI モデルと一緒に実行されます。OpenAI は retrieval、Web 検索、コンピュータ操作をホストツールとして提供しています。\n- 関数呼び出し: 任意の Python 関数をツールとして利用できます。\n- ツールとしてのエージェント: ハンドオフせずに、エージェントから他のエージェントを呼び出すことができます。\n\n## ホストツール\n\nOpenAI は [`OpenAIResponsesModel`](https://openai.github.io/openai-agents-python/ref/models/openai_responses/#agents.models.openai_responses.OpenAIResponsesModel \"OpenAIResponsesModel\") を使用する際に、いくつかの組み込みツールを提供しています。\n\n- [`WebSearchTool`](https://openai.github.io/openai-agents-python/ref/tool/#agents.tool.WebSearchTool \"WebSearchTool            dataclass   \") はエージェントに Web 検索を行わせます。\n- [`FileSearchTool`](https://openai.github.io/openai-agents-python/ref/tool/#agents.tool.FileSearchTool \"FileSearchTool            dataclass   \") は OpenAI ベクトルストアから情報を取得します。\n- [`ComputerTool`](https://openai.github.io/openai-agents-python/ref/tool/#agents.tool.ComputerTool \"ComputerTool            dataclass   \") はコンピュータ操作タスクを自動化します。\n- [`CodeInterpreterTool`](https://openai.github.io/openai-agents-python/ref/tool/#agents.tool.CodeInterpreterTool \"CodeInterpreterTool            dataclass   \") はサンドボックス環境でコードを実行します。\n- [`HostedMCPTool`](https://openai.github.io/openai-agents-python/ref/tool/#agents.tool.HostedMCPTool \"HostedMCPTool            dataclass   \") はリモート MCP サーバーのツールをモデルから直接利用できるようにします。\n- [`ImageGenerationTool`](https://openai.github.io/openai-agents-python/ref/tool/#agents.tool.ImageGenerationTool \"ImageGenerationTool            dataclass   \") はプロンプトから画像を生成します。\n- [`LocalShellTool`](https://openai.github.io/openai-agents-python/ref/tool/#agents.tool.LocalShellTool \"LocalShellTool            dataclass   \") はローカルマシンでシェルコマンドを実行します。\n\n```md-code__content\nfrom agents import Agent, FileSearchTool, Runner, WebSearchTool\n\nagent = Agent(\n    name=\"Assistant\",\n    tools=[\\\n        WebSearchTool(),\\\n        FileSearchTool(\\\n            max_num_results=3,\\\n            vector_store_ids=[\"VECTOR_STORE_ID\"],\\\n        ),\\\n    ],\n)\n\nasync def main():\n    result = await Runner.run(agent, \"Which coffee shop should I go to, taking into account my preferences and the weather today in SF?\")\n    print(result.final_output)\n\n```\n\n## 関数ツール\n\n任意の Python 関数をツールとして使用できます。Agents SDK が自動的に設定を行います。\n\n- ツールの名前は Python 関数の名前になります（任意で名前を指定することも可能です）\n- ツールの説明は関数の docstring から取得されます（任意で説明を指定することも可能です）\n- 関数の引数から自動的に入力スキーマを生成します\n- 各入力の説明は、無効化しない限り docstring から取得されます\n\nPython の `inspect` モジュールを使用して関数シグネチャを抽出し、 [`griffe`](https://mkdocstrings.github.io/griffe/) で docstring を解析し、 `pydantic` でスキーマを作成します。\n\n```md-code__content\nimport json\n\nfrom typing_extensions import TypedDict, Any\n\nfrom agents import Agent, FunctionTool, RunContextWrapper, function_tool\n\nclass Location(TypedDict):\n    lat: float\n    long: float\n\n@function_tool\nasync def fetch_weather(location: Location) -> str:\n\n    \"\"\"Fetch the weather for a given location.\n\n    Args:\n        location: The location to fetch the weather for.\n    \"\"\"\n    # In real life, we'd fetch the weather from a weather API\n    return \"sunny\"\n\n@function_tool(name_override=\"fetch_data\")\ndef read_file(ctx: RunContextWrapper[Any], path: str, directory: str | None = None) -> str:\n    \"\"\"Read the contents of a file.\n\n    Args:\n        path: The path to the file to read.\n        directory: The directory to read the file from.\n    \"\"\"\n    # In real life, we'd read the file from the file system\n    return \"<file contents>\"\n\nagent = Agent(\n    name=\"Assistant\",\n    tools=[fetch_weather, read_file],\n)\n\nfor tool in agent.tools:\n    if isinstance(tool, FunctionTool):\n        print(tool.name)\n        print(tool.description)\n        print(json.dumps(tool.params_json_schema, indent=2))\n        print()\n\n```\n\n展開して出力を確認\n\n```md-code__content\nfetch_weather\nFetch the weather for a given location.\n{\n\"$defs\": {\n  \"Location\": {\n    \"properties\": {\n      \"lat\": {\n        \"title\": \"Lat\",\n        \"type\": \"number\"\n      },\n      \"long\": {\n        \"title\": \"Long\",\n        \"type\": \"number\"\n      }\n    },\n    \"required\": [\\\n      \"lat\",\\\n      \"long\"\\\n    ],\n    \"title\": \"Location\",\n    \"type\": \"object\"\n  }\n},\n\"properties\": {\n  \"location\": {\n    \"$ref\": \"#/$defs/Location\",\n    \"description\": \"The location to fetch the weather for.\"\n  }\n},\n\"required\": [\\\n  \"location\"\\\n],\n\"title\": \"fetch_weather_args\",\n\"type\": \"object\"\n}\n\nfetch_data\nRead the contents of a file.\n{\n\"properties\": {\n  \"path\": {\n    \"description\": \"The path to the file to read.\",\n    \"title\": \"Path\",\n    \"type\": \"string\"\n  },\n  \"directory\": {\n    \"anyOf\": [\\\n      {\\\n        \"type\": \"string\"\\\n      },\\\n      {\\\n        \"type\": \"null\"\\\n      }\\\n    ],\n    \"default\": null,\n    \"description\": \"The directory to read the file from.\",\n    \"title\": \"Directory\"\n  }\n},\n\"required\": [\\\n  \"path\"\\\n],\n\"title\": \"fetch_data_args\",\n\"type\": \"object\"\n}\n\n```\n\n### カスタム関数ツール\n\nPython 関数をそのままツールにしたくない場合は、 [`FunctionTool`](https://openai.github.io/openai-agents-python/ref/tool/#agents.tool.FunctionTool \"FunctionTool            dataclass   \") を直接作成できます。次を指定する必要があります。\n\n- `name`\n- `description`\n- `params_json_schema`（引数の JSON スキーマ）\n- `on_invoke_tool`（context と引数の JSON 文字列を受け取り、ツールの出力を文字列で返す async 関数）\n\n```md-code__content\nfrom typing import Any\n\nfrom pydantic import BaseModel\n\nfrom agents import RunContextWrapper, FunctionTool\n\ndef do_some_work(data: str) -> str:\n    return \"done\"\n\nclass FunctionArgs(BaseModel):\n    username: str\n    age: int\n\nasync def run_function(ctx: RunContextWrapper[Any], args: str) -> str:\n    parsed = FunctionArgs.model_validate_json(args)\n    return do_some_work(data=f\"{parsed.username} is {parsed.age} years old\")\n\ntool = FunctionTool(\n    name=\"process_user\",\n    description=\"Processes extracted user data\",\n    params_json_schema=FunctionArgs.model_json_schema(),\n    on_invoke_tool=run_function,\n)\n\n```\n\n### 引数と docstring の自動解析\n\n前述のとおり、関数シグネチャを自動解析してツールのスキーマを生成し、docstring を解析してツールおよび個別引数の説明を抽出します。主な注意点は次のとおりです。\n\n1. シグネチャ解析は `inspect` モジュールで行います。型アノテーションを用いて引数の型を認識し、Pydantic モデルを動的に構築して全体のスキーマを表現します。Python の基本型、Pydantic モデル、TypedDict などほとんどの型をサポートします。\n2. `griffe` を使用して docstring を解析します。対応する docstring 形式は `google`、 `sphinx`、 `numpy` です。形式は自動検出を試みますが、 `function_tool` 呼び出し時に明示的に指定することもできます。 `use_docstring_info` を `False` に設定すると docstring 解析を無効化できます。\n\nスキーマ抽出のコードは [`agents.function_schema`](https://openai.github.io/openai-agents-python/ref/function_schema/#agents.function_schema) にあります。\n\n## ツールとしてのエージェント\n\n一部のワークフローでは、ハンドオフせずに中央のエージェントが複数の専門エージェントをオーケストレーションしたい場合があります。そのような場合、エージェントをツールとしてモデル化できます。\n\n```md-code__content\nfrom agents import Agent, Runner\nimport asyncio\n\nspanish_agent = Agent(\n    name=\"Spanish agent\",\n    instructions=\"You translate the user's message to Spanish\",\n)\n\nfrench_agent = Agent(\n    name=\"French agent\",\n    instructions=\"You translate the user's message to French\",\n)\n\norchestrator_agent = Agent(\n    name=\"orchestrator_agent\",\n    instructions=(\n        \"You are a translation agent. You use the tools given to you to translate.\"\n        \"If asked for multiple translations, you call the relevant tools.\"\n    ),\n    tools=[\\\n        spanish_agent.as_tool(\\\n            tool_name=\"translate_to_spanish\",\\\n            tool_description=\"Translate the user's message to Spanish\",\\\n        ),\\\n        french_agent.as_tool(\\\n            tool_name=\"translate_to_french\",\\\n            tool_description=\"Translate the user's message to French\",\\\n        ),\\\n    ],\n)\n\nasync def main():\n    result = await Runner.run(orchestrator_agent, input=\"Say 'Hello, how are you?' in Spanish.\")\n    print(result.final_output)\n\n```\n\n### ツールエージェントのカスタマイズ\n\n`agent.as_tool` 関数はエージェントを簡単にツール化するためのヘルパーです。ただし、すべての設定に対応しているわけではありません（例: `max_turns` は設定不可）。高度なユースケースでは、ツール実装内で `Runner.run` を直接使用してください。\n\n```md-code__content\n@function_tool\nasync def run_my_agent() -> str:\n  \"\"\"A tool that runs the agent with custom configs\".\n\n    agent = Agent(name=\"My agent\", instructions=\"...\")\n\n    result = await Runner.run(\n        agent,\n        input=\"...\",\n        max_turns=5,\n        run_config=...\n    )\n\n    return str(result.final_output)\n\n```\n\n## 関数ツールでのエラー処理\n\n`@function_tool` で関数ツールを作成する際、 `failure_error_function` を渡せます。これはツール呼び出しが失敗した場合に LLM へ返すエラーレスポンスを生成する関数です。\n\n- 何も指定しない場合、 `default_tool_error_function` が実行され、LLM にエラー発生を伝えます。\n- 独自のエラー関数を渡した場合はそちらが実行され、そのレスポンスが LLM へ送信されます。\n- 明示的に `None` を渡すと、ツール呼び出し時のエラーは再送出されます。モデルが無効な JSON を生成した場合は `ModelBehaviorError`、コードがクラッシュした場合は `UserError` などになります。\n\n`FunctionTool` オブジェクトを手動で作成する場合は、 `on_invoke_tool` 関数内でエラーを処理する必要があります。",
  "metadata": {
    "viewport": "width=device-width,initial-scale=1",
    "favicon": "https://openai.github.io/openai-agents-python/images/favicon-platform.svg",
    "language": "ja",
    "generator": "mkdocs-1.6.1, mkdocs-material-9.6.11",
    "title": "ツール - OpenAI Agents SDK",
    "scrapeId": "b8983fff-80da-49d3-a31d-2dcee85a68dc",
    "sourceURL": "https://openai.github.io/openai-agents-python/ja/tools/",
    "url": "https://openai.github.io/openai-agents-python/ja/tools/",
    "statusCode": 200,
    "contentType": "text/html; charset=utf-8",
    "proxyUsed": "basic"
  }
}