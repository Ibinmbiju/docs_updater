{
  "markdown": "[Skip to content](https://openai.github.io/openai-agents-python/ref/items/#items)\n\n# `Items`\n\n### TResponse`module-attribute`\n\n```md-code__content\nTResponse = Response\n\n```\n\nA type alias for the Response type from the OpenAI SDK.\n\n### TResponseInputItem`module-attribute`\n\n```md-code__content\nTResponseInputItem = ResponseInputItemParam\n\n```\n\nA type alias for the ResponseInputItemParam type from the OpenAI SDK.\n\n### TResponseOutputItem`module-attribute`\n\n```md-code__content\nTResponseOutputItem = ResponseOutputItem\n\n```\n\nA type alias for the ResponseOutputItem type from the OpenAI SDK.\n\n### TResponseStreamEvent`module-attribute`\n\n```md-code__content\nTResponseStreamEvent = ResponseStreamEvent\n\n```\n\nA type alias for the ResponseStreamEvent type from the OpenAI SDK.\n\n### ToolCallItemTypes`module-attribute`\n\n```md-code__content\nToolCallItemTypes: TypeAlias = Union[\\\n    ResponseFunctionToolCall,\\\n    ResponseComputerToolCall,\\\n    ResponseFileSearchToolCall,\\\n    ResponseFunctionWebSearch,\\\n    McpCall,\\\n    ResponseCodeInterpreterToolCall,\\\n    ImageGenerationCall,\\\n    LocalShellCall,\\\n]\n\n```\n\nA type that represents a tool call item.\n\n### RunItem`module-attribute`\n\n```md-code__content\nRunItem: TypeAlias = Union[\\\n    MessageOutputItem,\\\n    HandoffCallItem,\\\n    HandoffOutputItem,\\\n    ToolCallItem,\\\n    ToolCallOutputItem,\\\n    ReasoningItem,\\\n    MCPListToolsItem,\\\n    MCPApprovalRequestItem,\\\n    MCPApprovalResponseItem,\\\n]\n\n```\n\nAn item generated by an agent.\n\n### RunItemBase`dataclass`\n\nBases: `Generic[T]`, `ABC`\n\nSource code in `src/agents/items.py`\n\n|     |     |\n| --- | --- |\n| ```<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>69<br>70<br>71<br>72<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>``` | ```md-code__content<br>@dataclass<br>class RunItemBase(Generic[T], abc.ABC):<br>    agent: Agent[Any]<br>    \"\"\"The agent whose run caused this item to be generated.\"\"\"<br>    raw_item: T<br>    \"\"\"The raw Responses item from the run. This will always be a either an output item (i.e.<br>    `openai.types.responses.ResponseOutputItem` or an input item<br>    (i.e. `openai.types.responses.ResponseInputItemParam`).<br>    \"\"\"<br>    def to_input_item(self) -> TResponseInputItem:<br>        \"\"\"Converts this item into an input item suitable for passing to the model.\"\"\"<br>        if isinstance(self.raw_item, dict):<br>            # We know that input items are dicts, so we can ignore the type error<br>            return self.raw_item  # type: ignore<br>        elif isinstance(self.raw_item, BaseModel):<br>            # All output items are Pydantic models that can be converted to input items.<br>            return self.raw_item.model_dump(exclude_unset=True)  # type: ignore<br>        else:<br>            raise AgentsException(f\"Unexpected raw item type: {type(self.raw_item)}\")<br>``` |\n\n#### agent`instance-attribute`\n\n```md-code__content\nagent: Agent[Any]\n\n```\n\nThe agent whose run caused this item to be generated.\n\n#### raw\\_item`instance-attribute`\n\n```md-code__content\nraw_item: T\n\n```\n\nThe raw Responses item from the run. This will always be a either an output item (i.e.\n`openai.types.responses.ResponseOutputItem` or an input item\n(i.e. `openai.types.responses.ResponseInputItemParam`).\n\n#### to\\_input\\_item\n\n```md-code__content\nto_input_item() -> TResponseInputItem\n\n```\n\nConverts this item into an input item suitable for passing to the model.\n\nSource code in `src/agents/items.py`\n\n|     |     |\n| --- | --- |\n| ```<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>``` | ```md-code__content<br>def to_input_item(self) -> TResponseInputItem:<br>    \"\"\"Converts this item into an input item suitable for passing to the model.\"\"\"<br>    if isinstance(self.raw_item, dict):<br>        # We know that input items are dicts, so we can ignore the type error<br>        return self.raw_item  # type: ignore<br>    elif isinstance(self.raw_item, BaseModel):<br>        # All output items are Pydantic models that can be converted to input items.<br>        return self.raw_item.model_dump(exclude_unset=True)  # type: ignore<br>    else:<br>        raise AgentsException(f\"Unexpected raw item type: {type(self.raw_item)}\")<br>``` |\n\n### MessageOutputItem`dataclass`\n\nBases: `RunItemBase[ResponseOutputMessage]`\n\nRepresents a message from the LLM.\n\nSource code in `src/agents/items.py`\n\n|     |     |\n| --- | --- |\n| ```<br>85<br>86<br>87<br>88<br>89<br>90<br>91<br>92<br>``` | ```md-code__content<br>@dataclass<br>class MessageOutputItem(RunItemBase[ResponseOutputMessage]):<br>    \"\"\"Represents a message from the LLM.\"\"\"<br>    raw_item: ResponseOutputMessage<br>    \"\"\"The raw response output message.\"\"\"<br>    type: Literal[\"message_output_item\"] = \"message_output_item\"<br>``` |\n\n#### raw\\_item`instance-attribute`\n\n```md-code__content\nraw_item: ResponseOutputMessage\n\n```\n\nThe raw response output message.\n\n#### agent`instance-attribute`\n\n```md-code__content\nagent: Agent[Any]\n\n```\n\nThe agent whose run caused this item to be generated.\n\n#### to\\_input\\_item\n\n```md-code__content\nto_input_item() -> TResponseInputItem\n\n```\n\nConverts this item into an input item suitable for passing to the model.\n\nSource code in `src/agents/items.py`\n\n|     |     |\n| --- | --- |\n| ```<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>``` | ```md-code__content<br>def to_input_item(self) -> TResponseInputItem:<br>    \"\"\"Converts this item into an input item suitable for passing to the model.\"\"\"<br>    if isinstance(self.raw_item, dict):<br>        # We know that input items are dicts, so we can ignore the type error<br>        return self.raw_item  # type: ignore<br>    elif isinstance(self.raw_item, BaseModel):<br>        # All output items are Pydantic models that can be converted to input items.<br>        return self.raw_item.model_dump(exclude_unset=True)  # type: ignore<br>    else:<br>        raise AgentsException(f\"Unexpected raw item type: {type(self.raw_item)}\")<br>``` |\n\n### HandoffCallItem`dataclass`\n\nBases: `RunItemBase[ResponseFunctionToolCall]`\n\nRepresents a tool call for a handoff from one agent to another.\n\nSource code in `src/agents/items.py`\n\n|     |     |\n| --- | --- |\n| ```<br> 95<br> 96<br> 97<br> 98<br> 99<br>100<br>101<br>102<br>``` | ```md-code__content<br>@dataclass<br>class HandoffCallItem(RunItemBase[ResponseFunctionToolCall]):<br>    \"\"\"Represents a tool call for a handoff from one agent to another.\"\"\"<br>    raw_item: ResponseFunctionToolCall<br>    \"\"\"The raw response function tool call that represents the handoff.\"\"\"<br>    type: Literal[\"handoff_call_item\"] = \"handoff_call_item\"<br>``` |\n\n#### raw\\_item`instance-attribute`\n\n```md-code__content\nraw_item: ResponseFunctionToolCall\n\n```\n\nThe raw response function tool call that represents the handoff.\n\n#### agent`instance-attribute`\n\n```md-code__content\nagent: Agent[Any]\n\n```\n\nThe agent whose run caused this item to be generated.\n\n#### to\\_input\\_item\n\n```md-code__content\nto_input_item() -> TResponseInputItem\n\n```\n\nConverts this item into an input item suitable for passing to the model.\n\nSource code in `src/agents/items.py`\n\n|     |     |\n| --- | --- |\n| ```<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>``` | ```md-code__content<br>def to_input_item(self) -> TResponseInputItem:<br>    \"\"\"Converts this item into an input item suitable for passing to the model.\"\"\"<br>    if isinstance(self.raw_item, dict):<br>        # We know that input items are dicts, so we can ignore the type error<br>        return self.raw_item  # type: ignore<br>    elif isinstance(self.raw_item, BaseModel):<br>        # All output items are Pydantic models that can be converted to input items.<br>        return self.raw_item.model_dump(exclude_unset=True)  # type: ignore<br>    else:<br>        raise AgentsException(f\"Unexpected raw item type: {type(self.raw_item)}\")<br>``` |\n\n### HandoffOutputItem`dataclass`\n\nBases: `RunItemBase[TResponseInputItem]`\n\nRepresents the output of a handoff.\n\nSource code in `src/agents/items.py`\n\n|     |     |\n| --- | --- |\n| ```<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>``` | ```md-code__content<br>@dataclass<br>class HandoffOutputItem(RunItemBase[TResponseInputItem]):<br>    \"\"\"Represents the output of a handoff.\"\"\"<br>    raw_item: TResponseInputItem<br>    \"\"\"The raw input item that represents the handoff taking place.\"\"\"<br>    source_agent: Agent[Any]<br>    \"\"\"The agent that made the handoff.\"\"\"<br>    target_agent: Agent[Any]<br>    \"\"\"The agent that is being handed off to.\"\"\"<br>    type: Literal[\"handoff_output_item\"] = \"handoff_output_item\"<br>``` |\n\n#### raw\\_item`instance-attribute`\n\n```md-code__content\nraw_item: TResponseInputItem\n\n```\n\nThe raw input item that represents the handoff taking place.\n\n#### source\\_agent`instance-attribute`\n\n```md-code__content\nsource_agent: Agent[Any]\n\n```\n\nThe agent that made the handoff.\n\n#### target\\_agent`instance-attribute`\n\n```md-code__content\ntarget_agent: Agent[Any]\n\n```\n\nThe agent that is being handed off to.\n\n#### agent`instance-attribute`\n\n```md-code__content\nagent: Agent[Any]\n\n```\n\nThe agent whose run caused this item to be generated.\n\n#### to\\_input\\_item\n\n```md-code__content\nto_input_item() -> TResponseInputItem\n\n```\n\nConverts this item into an input item suitable for passing to the model.\n\nSource code in `src/agents/items.py`\n\n|     |     |\n| --- | --- |\n| ```<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>``` | ```md-code__content<br>def to_input_item(self) -> TResponseInputItem:<br>    \"\"\"Converts this item into an input item suitable for passing to the model.\"\"\"<br>    if isinstance(self.raw_item, dict):<br>        # We know that input items are dicts, so we can ignore the type error<br>        return self.raw_item  # type: ignore<br>    elif isinstance(self.raw_item, BaseModel):<br>        # All output items are Pydantic models that can be converted to input items.<br>        return self.raw_item.model_dump(exclude_unset=True)  # type: ignore<br>    else:<br>        raise AgentsException(f\"Unexpected raw item type: {type(self.raw_item)}\")<br>``` |\n\n### ToolCallItem`dataclass`\n\nBases: `RunItemBase[ToolCallItemTypes]`\n\nRepresents a tool call e.g. a function call or computer action call.\n\nSource code in `src/agents/items.py`\n\n|     |     |\n| --- | --- |\n| ```<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>``` | ```md-code__content<br>@dataclass<br>class ToolCallItem(RunItemBase[ToolCallItemTypes]):<br>    \"\"\"Represents a tool call e.g. a function call or computer action call.\"\"\"<br>    raw_item: ToolCallItemTypes<br>    \"\"\"The raw tool call item.\"\"\"<br>    type: Literal[\"tool_call_item\"] = \"tool_call_item\"<br>``` |\n\n#### raw\\_item`instance-attribute`\n\n```md-code__content\nraw_item: ToolCallItemTypes\n\n```\n\nThe raw tool call item.\n\n#### agent`instance-attribute`\n\n```md-code__content\nagent: Agent[Any]\n\n```\n\nThe agent whose run caused this item to be generated.\n\n#### to\\_input\\_item\n\n```md-code__content\nto_input_item() -> TResponseInputItem\n\n```\n\nConverts this item into an input item suitable for passing to the model.\n\nSource code in `src/agents/items.py`\n\n|     |     |\n| --- | --- |\n| ```<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>``` | ```md-code__content<br>def to_input_item(self) -> TResponseInputItem:<br>    \"\"\"Converts this item into an input item suitable for passing to the model.\"\"\"<br>    if isinstance(self.raw_item, dict):<br>        # We know that input items are dicts, so we can ignore the type error<br>        return self.raw_item  # type: ignore<br>    elif isinstance(self.raw_item, BaseModel):<br>        # All output items are Pydantic models that can be converted to input items.<br>        return self.raw_item.model_dump(exclude_unset=True)  # type: ignore<br>    else:<br>        raise AgentsException(f\"Unexpected raw item type: {type(self.raw_item)}\")<br>``` |\n\n### ToolCallOutputItem`dataclass`\n\nBases: `RunItemBase[Union[FunctionCallOutput, ComputerCallOutput, LocalShellCallOutput]]`\n\nRepresents the output of a tool call.\n\nSource code in `src/agents/items.py`\n\n|     |     |\n| --- | --- |\n| ```<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>``` | ```md-code__content<br>@dataclass<br>class ToolCallOutputItem(<br>    RunItemBase[Union[FunctionCallOutput, ComputerCallOutput, LocalShellCallOutput]]<br>):<br>    \"\"\"Represents the output of a tool call.\"\"\"<br>    raw_item: FunctionCallOutput | ComputerCallOutput | LocalShellCallOutput<br>    \"\"\"The raw item from the model.\"\"\"<br>    output: Any<br>    \"\"\"The output of the tool call. This is whatever the tool call returned; the `raw_item`<br>    contains a string representation of the output.<br>    \"\"\"<br>    type: Literal[\"tool_call_output_item\"] = \"tool_call_output_item\"<br>``` |\n\n#### raw\\_item`instance-attribute`\n\n```md-code__content\nraw_item: (\n    FunctionCallOutput\n    | ComputerCallOutput\n    | LocalShellCallOutput\n)\n\n```\n\nThe raw item from the model.\n\n#### output`instance-attribute`\n\n```md-code__content\noutput: Any\n\n```\n\nThe output of the tool call. This is whatever the tool call returned; the `raw_item`\ncontains a string representation of the output.\n\n#### agent`instance-attribute`\n\n```md-code__content\nagent: Agent[Any]\n\n```\n\nThe agent whose run caused this item to be generated.\n\n#### to\\_input\\_item\n\n```md-code__content\nto_input_item() -> TResponseInputItem\n\n```\n\nConverts this item into an input item suitable for passing to the model.\n\nSource code in `src/agents/items.py`\n\n|     |     |\n| --- | --- |\n| ```<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>``` | ```md-code__content<br>def to_input_item(self) -> TResponseInputItem:<br>    \"\"\"Converts this item into an input item suitable for passing to the model.\"\"\"<br>    if isinstance(self.raw_item, dict):<br>        # We know that input items are dicts, so we can ignore the type error<br>        return self.raw_item  # type: ignore<br>    elif isinstance(self.raw_item, BaseModel):<br>        # All output items are Pydantic models that can be converted to input items.<br>        return self.raw_item.model_dump(exclude_unset=True)  # type: ignore<br>    else:<br>        raise AgentsException(f\"Unexpected raw item type: {type(self.raw_item)}\")<br>``` |\n\n### ReasoningItem`dataclass`\n\nBases: `RunItemBase[ResponseReasoningItem]`\n\nRepresents a reasoning item.\n\nSource code in `src/agents/items.py`\n\n|     |     |\n| --- | --- |\n| ```<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>``` | ```md-code__content<br>@dataclass<br>class ReasoningItem(RunItemBase[ResponseReasoningItem]):<br>    \"\"\"Represents a reasoning item.\"\"\"<br>    raw_item: ResponseReasoningItem<br>    \"\"\"The raw reasoning item.\"\"\"<br>    type: Literal[\"reasoning_item\"] = \"reasoning_item\"<br>``` |\n\n#### raw\\_item`instance-attribute`\n\n```md-code__content\nraw_item: ResponseReasoningItem\n\n```\n\nThe raw reasoning item.\n\n#### agent`instance-attribute`\n\n```md-code__content\nagent: Agent[Any]\n\n```\n\nThe agent whose run caused this item to be generated.\n\n#### to\\_input\\_item\n\n```md-code__content\nto_input_item() -> TResponseInputItem\n\n```\n\nConverts this item into an input item suitable for passing to the model.\n\nSource code in `src/agents/items.py`\n\n|     |     |\n| --- | --- |\n| ```<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>``` | ```md-code__content<br>def to_input_item(self) -> TResponseInputItem:<br>    \"\"\"Converts this item into an input item suitable for passing to the model.\"\"\"<br>    if isinstance(self.raw_item, dict):<br>        # We know that input items are dicts, so we can ignore the type error<br>        return self.raw_item  # type: ignore<br>    elif isinstance(self.raw_item, BaseModel):<br>        # All output items are Pydantic models that can be converted to input items.<br>        return self.raw_item.model_dump(exclude_unset=True)  # type: ignore<br>    else:<br>        raise AgentsException(f\"Unexpected raw item type: {type(self.raw_item)}\")<br>``` |\n\n### MCPListToolsItem`dataclass`\n\nBases: `RunItemBase[McpListTools]`\n\nRepresents a call to an MCP server to list tools.\n\nSource code in `src/agents/items.py`\n\n|     |     |\n| --- | --- |\n| ```<br>171<br>172<br>173<br>174<br>175<br>176<br>177<br>178<br>``` | ```md-code__content<br>@dataclass<br>class MCPListToolsItem(RunItemBase[McpListTools]):<br>    \"\"\"Represents a call to an MCP server to list tools.\"\"\"<br>    raw_item: McpListTools<br>    \"\"\"The raw MCP list tools call.\"\"\"<br>    type: Literal[\"mcp_list_tools_item\"] = \"mcp_list_tools_item\"<br>``` |\n\n#### raw\\_item`instance-attribute`\n\n```md-code__content\nraw_item: McpListTools\n\n```\n\nThe raw MCP list tools call.\n\n#### agent`instance-attribute`\n\n```md-code__content\nagent: Agent[Any]\n\n```\n\nThe agent whose run caused this item to be generated.\n\n#### to\\_input\\_item\n\n```md-code__content\nto_input_item() -> TResponseInputItem\n\n```\n\nConverts this item into an input item suitable for passing to the model.\n\nSource code in `src/agents/items.py`\n\n|     |     |\n| --- | --- |\n| ```<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>``` | ```md-code__content<br>def to_input_item(self) -> TResponseInputItem:<br>    \"\"\"Converts this item into an input item suitable for passing to the model.\"\"\"<br>    if isinstance(self.raw_item, dict):<br>        # We know that input items are dicts, so we can ignore the type error<br>        return self.raw_item  # type: ignore<br>    elif isinstance(self.raw_item, BaseModel):<br>        # All output items are Pydantic models that can be converted to input items.<br>        return self.raw_item.model_dump(exclude_unset=True)  # type: ignore<br>    else:<br>        raise AgentsException(f\"Unexpected raw item type: {type(self.raw_item)}\")<br>``` |\n\n### MCPApprovalRequestItem`dataclass`\n\nBases: `RunItemBase[McpApprovalRequest]`\n\nRepresents a request for MCP approval.\n\nSource code in `src/agents/items.py`\n\n|     |     |\n| --- | --- |\n| ```<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>``` | ```md-code__content<br>@dataclass<br>class MCPApprovalRequestItem(RunItemBase[McpApprovalRequest]):<br>    \"\"\"Represents a request for MCP approval.\"\"\"<br>    raw_item: McpApprovalRequest<br>    \"\"\"The raw MCP approval request.\"\"\"<br>    type: Literal[\"mcp_approval_request_item\"] = \"mcp_approval_request_item\"<br>``` |\n\n#### raw\\_item`instance-attribute`\n\n```md-code__content\nraw_item: McpApprovalRequest\n\n```\n\nThe raw MCP approval request.\n\n#### agent`instance-attribute`\n\n```md-code__content\nagent: Agent[Any]\n\n```\n\nThe agent whose run caused this item to be generated.\n\n#### to\\_input\\_item\n\n```md-code__content\nto_input_item() -> TResponseInputItem\n\n```\n\nConverts this item into an input item suitable for passing to the model.\n\nSource code in `src/agents/items.py`\n\n|     |     |\n| --- | --- |\n| ```<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>``` | ```md-code__content<br>def to_input_item(self) -> TResponseInputItem:<br>    \"\"\"Converts this item into an input item suitable for passing to the model.\"\"\"<br>    if isinstance(self.raw_item, dict):<br>        # We know that input items are dicts, so we can ignore the type error<br>        return self.raw_item  # type: ignore<br>    elif isinstance(self.raw_item, BaseModel):<br>        # All output items are Pydantic models that can be converted to input items.<br>        return self.raw_item.model_dump(exclude_unset=True)  # type: ignore<br>    else:<br>        raise AgentsException(f\"Unexpected raw item type: {type(self.raw_item)}\")<br>``` |\n\n### MCPApprovalResponseItem`dataclass`\n\nBases: `RunItemBase[McpApprovalResponse]`\n\nRepresents a response to an MCP approval request.\n\nSource code in `src/agents/items.py`\n\n|     |     |\n| --- | --- |\n| ```<br>191<br>192<br>193<br>194<br>195<br>196<br>197<br>198<br>``` | ```md-code__content<br>@dataclass<br>class MCPApprovalResponseItem(RunItemBase[McpApprovalResponse]):<br>    \"\"\"Represents a response to an MCP approval request.\"\"\"<br>    raw_item: McpApprovalResponse<br>    \"\"\"The raw MCP approval response.\"\"\"<br>    type: Literal[\"mcp_approval_response_item\"] = \"mcp_approval_response_item\"<br>``` |\n\n#### raw\\_item`instance-attribute`\n\n```md-code__content\nraw_item: McpApprovalResponse\n\n```\n\nThe raw MCP approval response.\n\n#### agent`instance-attribute`\n\n```md-code__content\nagent: Agent[Any]\n\n```\n\nThe agent whose run caused this item to be generated.\n\n#### to\\_input\\_item\n\n```md-code__content\nto_input_item() -> TResponseInputItem\n\n```\n\nConverts this item into an input item suitable for passing to the model.\n\nSource code in `src/agents/items.py`\n\n|     |     |\n| --- | --- |\n| ```<br>73<br>74<br>75<br>76<br>77<br>78<br>79<br>80<br>81<br>82<br>``` | ```md-code__content<br>def to_input_item(self) -> TResponseInputItem:<br>    \"\"\"Converts this item into an input item suitable for passing to the model.\"\"\"<br>    if isinstance(self.raw_item, dict):<br>        # We know that input items are dicts, so we can ignore the type error<br>        return self.raw_item  # type: ignore<br>    elif isinstance(self.raw_item, BaseModel):<br>        # All output items are Pydantic models that can be converted to input items.<br>        return self.raw_item.model_dump(exclude_unset=True)  # type: ignore<br>    else:<br>        raise AgentsException(f\"Unexpected raw item type: {type(self.raw_item)}\")<br>``` |\n\n### ModelResponse`dataclass`\n\nSource code in `src/agents/items.py`\n\n|     |     |\n| --- | --- |\n| ```<br>215<br>216<br>217<br>218<br>219<br>220<br>221<br>222<br>223<br>224<br>225<br>226<br>227<br>228<br>229<br>230<br>231<br>232<br>233<br>234<br>235<br>``` | ```md-code__content<br>@dataclass<br>class ModelResponse:<br>    output: list[TResponseOutputItem]<br>    \"\"\"A list of outputs (messages, tool calls, etc) generated by the model\"\"\"<br>    usage: Usage<br>    \"\"\"The usage information for the response.\"\"\"<br>    response_id: str | None<br>    \"\"\"An ID for the response which can be used to refer to the response in subsequent calls to the<br>    model. Not supported by all model providers.<br>    If using OpenAI models via the Responses API, this is the `response_id` parameter, and it can<br>    be passed to `Runner.run`.<br>    \"\"\"<br>    def to_input_items(self) -> list[TResponseInputItem]:<br>        \"\"\"Convert the output into a list of input items suitable for passing to the model.\"\"\"<br>        # We happen to know that the shape of the Pydantic output items are the same as the<br>        # equivalent TypedDict input items, so we can just convert each one.<br>        # This is also tested via unit tests.<br>        return [it.model_dump(exclude_unset=True) for it in self.output]  # type: ignore<br>``` |\n\n#### output`instance-attribute`\n\n```md-code__content\noutput: list[TResponseOutputItem]\n\n```\n\nA list of outputs (messages, tool calls, etc) generated by the model\n\n#### usage`instance-attribute`\n\n```md-code__content\nusage: Usage\n\n```\n\nThe usage information for the response.\n\n#### response\\_id`instance-attribute`\n\n```md-code__content\nresponse_id: str | None\n\n```\n\nAn ID for the response which can be used to refer to the response in subsequent calls to the\nmodel. Not supported by all model providers.\nIf using OpenAI models via the Responses API, this is the `response_id` parameter, and it can\nbe passed to `Runner.run`.\n\n#### to\\_input\\_items\n\n```md-code__content\nto_input_items() -> list[TResponseInputItem]\n\n```\n\nConvert the output into a list of input items suitable for passing to the model.\n\nSource code in `src/agents/items.py`\n\n|     |     |\n| --- | --- |\n| ```<br>230<br>231<br>232<br>233<br>234<br>235<br>``` | ```md-code__content<br>def to_input_items(self) -> list[TResponseInputItem]:<br>    \"\"\"Convert the output into a list of input items suitable for passing to the model.\"\"\"<br>    # We happen to know that the shape of the Pydantic output items are the same as the<br>    # equivalent TypedDict input items, so we can just convert each one.<br>    # This is also tested via unit tests.<br>    return [it.model_dump(exclude_unset=True) for it in self.output]  # type: ignore<br>``` |\n\n### ItemHelpers\n\nSource code in `src/agents/items.py`\n\n|     |     |\n| --- | --- |\n| ```<br>238<br>239<br>240<br>241<br>242<br>243<br>244<br>245<br>246<br>247<br>248<br>249<br>250<br>251<br>252<br>253<br>254<br>255<br>256<br>257<br>258<br>259<br>260<br>261<br>262<br>263<br>264<br>265<br>266<br>267<br>268<br>269<br>270<br>271<br>272<br>273<br>274<br>275<br>276<br>277<br>278<br>279<br>280<br>281<br>282<br>283<br>284<br>285<br>286<br>287<br>288<br>289<br>290<br>291<br>292<br>293<br>294<br>295<br>296<br>297<br>298<br>299<br>300<br>301<br>302<br>303<br>304<br>``` | ```md-code__content<br>class ItemHelpers:<br>    @classmethod<br>    def extract_last_content(cls, message: TResponseOutputItem) -> str:<br>        \"\"\"Extracts the last text content or refusal from a message.\"\"\"<br>        if not isinstance(message, ResponseOutputMessage):<br>            return \"\"<br>        last_content = message.content[-1]<br>        if isinstance(last_content, ResponseOutputText):<br>            return last_content.text<br>        elif isinstance(last_content, ResponseOutputRefusal):<br>            return last_content.refusal<br>        else:<br>            raise ModelBehaviorError(f\"Unexpected content type: {type(last_content)}\")<br>    @classmethod<br>    def extract_last_text(cls, message: TResponseOutputItem) -> str | None:<br>        \"\"\"Extracts the last text content from a message, if any. Ignores refusals.\"\"\"<br>        if isinstance(message, ResponseOutputMessage):<br>            last_content = message.content[-1]<br>            if isinstance(last_content, ResponseOutputText):<br>                return last_content.text<br>        return None<br>    @classmethod<br>    def input_to_new_input_list(<br>        cls, input: str | list[TResponseInputItem]<br>    ) -> list[TResponseInputItem]:<br>        \"\"\"Converts a string or list of input items into a list of input items.\"\"\"<br>        if isinstance(input, str):<br>            return [<br>                {<br>                    \"content\": input,<br>                    \"role\": \"user\",<br>                }<br>            ]<br>        return copy.deepcopy(input)<br>    @classmethod<br>    def text_message_outputs(cls, items: list[RunItem]) -> str:<br>        \"\"\"Concatenates all the text content from a list of message output items.\"\"\"<br>        text = \"\"<br>        for item in items:<br>            if isinstance(item, MessageOutputItem):<br>                text += cls.text_message_output(item)<br>        return text<br>    @classmethod<br>    def text_message_output(cls, message: MessageOutputItem) -> str:<br>        \"\"\"Extracts all the text content from a single message output item.\"\"\"<br>        text = \"\"<br>        for item in message.raw_item.content:<br>            if isinstance(item, ResponseOutputText):<br>                text += item.text<br>        return text<br>    @classmethod<br>    def tool_call_output_item(<br>        cls, tool_call: ResponseFunctionToolCall, output: str<br>    ) -> FunctionCallOutput:<br>        \"\"\"Creates a tool call output item from a tool call and its output.\"\"\"<br>        return {<br>            \"call_id\": tool_call.call_id,<br>            \"output\": output,<br>            \"type\": \"function_call_output\",<br>        }<br>``` |\n\n#### extract\\_last\\_content`classmethod`\n\n```md-code__content\nextract_last_content(message: TResponseOutputItem) -> str\n\n```\n\nExtracts the last text content or refusal from a message.\n\nSource code in `src/agents/items.py`\n\n|     |     |\n| --- | --- |\n| ```<br>239<br>240<br>241<br>242<br>243<br>244<br>245<br>246<br>247<br>248<br>249<br>250<br>251<br>``` | ```md-code__content<br>@classmethod<br>def extract_last_content(cls, message: TResponseOutputItem) -> str:<br>    \"\"\"Extracts the last text content or refusal from a message.\"\"\"<br>    if not isinstance(message, ResponseOutputMessage):<br>        return \"\"<br>    last_content = message.content[-1]<br>    if isinstance(last_content, ResponseOutputText):<br>        return last_content.text<br>    elif isinstance(last_content, ResponseOutputRefusal):<br>        return last_content.refusal<br>    else:<br>        raise ModelBehaviorError(f\"Unexpected content type: {type(last_content)}\")<br>``` |\n\n#### extract\\_last\\_text`classmethod`\n\n```md-code__content\nextract_last_text(\n    message: TResponseOutputItem,\n) -> str | None\n\n```\n\nExtracts the last text content from a message, if any. Ignores refusals.\n\nSource code in `src/agents/items.py`\n\n|     |     |\n| --- | --- |\n| ```<br>253<br>254<br>255<br>256<br>257<br>258<br>259<br>260<br>261<br>``` | ```md-code__content<br>@classmethod<br>def extract_last_text(cls, message: TResponseOutputItem) -> str | None:<br>    \"\"\"Extracts the last text content from a message, if any. Ignores refusals.\"\"\"<br>    if isinstance(message, ResponseOutputMessage):<br>        last_content = message.content[-1]<br>        if isinstance(last_content, ResponseOutputText):<br>            return last_content.text<br>    return None<br>``` |\n\n#### input\\_to\\_new\\_input\\_list`classmethod`\n\n```md-code__content\ninput_to_new_input_list(\n    input: str | list[TResponseInputItem],\n) -> list[TResponseInputItem]\n\n```\n\nConverts a string or list of input items into a list of input items.\n\nSource code in `src/agents/items.py`\n\n|     |     |\n| --- | --- |\n| ```<br>263<br>264<br>265<br>266<br>267<br>268<br>269<br>270<br>271<br>272<br>273<br>274<br>275<br>``` | ```md-code__content<br>@classmethod<br>def input_to_new_input_list(<br>    cls, input: str | list[TResponseInputItem]<br>) -> list[TResponseInputItem]:<br>    \"\"\"Converts a string or list of input items into a list of input items.\"\"\"<br>    if isinstance(input, str):<br>        return [<br>            {<br>                \"content\": input,<br>                \"role\": \"user\",<br>            }<br>        ]<br>    return copy.deepcopy(input)<br>``` |\n\n#### text\\_message\\_outputs`classmethod`\n\n```md-code__content\ntext_message_outputs(items: list[RunItem]) -> str\n\n```\n\nConcatenates all the text content from a list of message output items.\n\nSource code in `src/agents/items.py`\n\n|     |     |\n| --- | --- |\n| ```<br>277<br>278<br>279<br>280<br>281<br>282<br>283<br>284<br>``` | ```md-code__content<br>@classmethod<br>def text_message_outputs(cls, items: list[RunItem]) -> str:<br>    \"\"\"Concatenates all the text content from a list of message output items.\"\"\"<br>    text = \"\"<br>    for item in items:<br>        if isinstance(item, MessageOutputItem):<br>            text += cls.text_message_output(item)<br>    return text<br>``` |\n\n#### text\\_message\\_output`classmethod`\n\n```md-code__content\ntext_message_output(message: MessageOutputItem) -> str\n\n```\n\nExtracts all the text content from a single message output item.\n\nSource code in `src/agents/items.py`\n\n|     |     |\n| --- | --- |\n| ```<br>286<br>287<br>288<br>289<br>290<br>291<br>292<br>293<br>``` | ```md-code__content<br>@classmethod<br>def text_message_output(cls, message: MessageOutputItem) -> str:<br>    \"\"\"Extracts all the text content from a single message output item.\"\"\"<br>    text = \"\"<br>    for item in message.raw_item.content:<br>        if isinstance(item, ResponseOutputText):<br>            text += item.text<br>    return text<br>``` |\n\n#### tool\\_call\\_output\\_item`classmethod`\n\n```md-code__content\ntool_call_output_item(\n    tool_call: ResponseFunctionToolCall, output: str\n) -> FunctionCallOutput\n\n```\n\nCreates a tool call output item from a tool call and its output.\n\nSource code in `src/agents/items.py`\n\n|     |     |\n| --- | --- |\n| ```<br>295<br>296<br>297<br>298<br>299<br>300<br>301<br>302<br>303<br>304<br>``` | ```md-code__content<br>@classmethod<br>def tool_call_output_item(<br>    cls, tool_call: ResponseFunctionToolCall, output: str<br>) -> FunctionCallOutput:<br>    \"\"\"Creates a tool call output item from a tool call and its output.\"\"\"<br>    return {<br>        \"call_id\": tool_call.call_id,<br>        \"output\": output,<br>        \"type\": \"function_call_output\",<br>    }<br>``` |",
  "metadata": {
    "title": "Items - OpenAI Agents SDK",
    "viewport": "width=device-width,initial-scale=1",
    "generator": "mkdocs-1.6.1, mkdocs-material-9.6.11",
    "language": "en",
    "favicon": "https://openai.github.io/openai-agents-python/images/favicon-platform.svg",
    "scrapeId": "87c38b43-0db5-4f3b-a11c-d27c0877330c",
    "sourceURL": "https://openai.github.io/openai-agents-python/ref/items/",
    "url": "https://openai.github.io/openai-agents-python/ref/items/",
    "statusCode": 200,
    "contentType": "text/html; charset=utf-8",
    "proxyUsed": "basic"
  }
}