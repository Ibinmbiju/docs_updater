{
  "markdown": "[Skip to content](https://openai.github.io/openai-agents-python/ref/guardrail/#guardrails)\n\n# `Guardrails`\n\n### GuardrailFunctionOutput`dataclass`\n\nThe output of a guardrail function.\n\nSource code in `src/agents/guardrail.py`\n\n|     |     |\n| --- | --- |\n| ```<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>``` | ```md-code__content<br>@dataclass<br>class GuardrailFunctionOutput:<br>    \"\"\"The output of a guardrail function.\"\"\"<br>    output_info: Any<br>    \"\"\"<br>    Optional information about the guardrail's output. For example, the guardrail could include<br>    information about the checks it performed and granular results.<br>    \"\"\"<br>    tripwire_triggered: bool<br>    \"\"\"<br>    Whether the tripwire was triggered. If triggered, the agent's execution will be halted.<br>    \"\"\"<br>``` |\n\n#### output\\_info`instance-attribute`\n\n```md-code__content\noutput_info: Any\n\n```\n\nOptional information about the guardrail's output. For example, the guardrail could include\ninformation about the checks it performed and granular results.\n\n#### tripwire\\_triggered`instance-attribute`\n\n```md-code__content\ntripwire_triggered: bool\n\n```\n\nWhether the tripwire was triggered. If triggered, the agent's execution will be halted.\n\n### InputGuardrailResult`dataclass`\n\nThe result of a guardrail run.\n\nSource code in `src/agents/guardrail.py`\n\n|     |     |\n| --- | --- |\n| ```<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>``` | ```md-code__content<br>@dataclass<br>class InputGuardrailResult:<br>    \"\"\"The result of a guardrail run.\"\"\"<br>    guardrail: InputGuardrail[Any]<br>    \"\"\"<br>    The guardrail that was run.<br>    \"\"\"<br>    output: GuardrailFunctionOutput<br>    \"\"\"The output of the guardrail function.\"\"\"<br>``` |\n\n#### guardrail`instance-attribute`\n\n```md-code__content\nguardrail: InputGuardrail[Any]\n\n```\n\nThe guardrail that was run.\n\n#### output`instance-attribute`\n\n```md-code__content\noutput: GuardrailFunctionOutput\n\n```\n\nThe output of the guardrail function.\n\n### OutputGuardrailResult`dataclass`\n\nThe result of a guardrail run.\n\nSource code in `src/agents/guardrail.py`\n\n|     |     |\n| --- | --- |\n| ```<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>67<br>68<br>``` | ```md-code__content<br>@dataclass<br>class OutputGuardrailResult:<br>    \"\"\"The result of a guardrail run.\"\"\"<br>    guardrail: OutputGuardrail[Any]<br>    \"\"\"<br>    The guardrail that was run.<br>    \"\"\"<br>    agent_output: Any<br>    \"\"\"<br>    The output of the agent that was checked by the guardrail.<br>    \"\"\"<br>    agent: Agent[Any]<br>    \"\"\"<br>    The agent that was checked by the guardrail.<br>    \"\"\"<br>    output: GuardrailFunctionOutput<br>    \"\"\"The output of the guardrail function.\"\"\"<br>``` |\n\n#### guardrail`instance-attribute`\n\n```md-code__content\nguardrail: OutputGuardrail[Any]\n\n```\n\nThe guardrail that was run.\n\n#### agent\\_output`instance-attribute`\n\n```md-code__content\nagent_output: Any\n\n```\n\nThe output of the agent that was checked by the guardrail.\n\n#### agent`instance-attribute`\n\n```md-code__content\nagent: Agent[Any]\n\n```\n\nThe agent that was checked by the guardrail.\n\n#### output`instance-attribute`\n\n```md-code__content\noutput: GuardrailFunctionOutput\n\n```\n\nThe output of the guardrail function.\n\n### InputGuardrail`dataclass`\n\nBases: `Generic[TContext]`\n\nInput guardrails are checks that run in parallel to the agent's execution.\nThey can be used to do things like:\n\\- Check if input messages are off-topic\n\\- Take over control of the agent's execution if an unexpected input is detected\n\nYou can use the `@input_guardrail()` decorator to turn a function into an `InputGuardrail`, or\ncreate an `InputGuardrail` manually.\n\nGuardrails return a `GuardrailResult`. If `result.tripwire_triggered` is `True`, the agent\nexecution will immediately stop and a `InputGuardrailTripwireTriggered` exception will be raised\n\nSource code in `src/agents/guardrail.py`\n\n|     |     |\n| --- | --- |\n| ```<br> 71<br> 72<br> 73<br> 74<br> 75<br> 76<br> 77<br> 78<br> 79<br> 80<br> 81<br> 82<br> 83<br> 84<br> 85<br> 86<br> 87<br> 88<br> 89<br> 90<br> 91<br> 92<br> 93<br> 94<br> 95<br> 96<br> 97<br> 98<br> 99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>``` | ```md-code__content<br>@dataclass<br>class InputGuardrail(Generic[TContext]):<br>    \"\"\"Input guardrails are checks that run in parallel to the agent's execution.<br>    They can be used to do things like:<br>    - Check if input messages are off-topic<br>    - Take over control of the agent's execution if an unexpected input is detected<br>    You can use the `@input_guardrail()` decorator to turn a function into an `InputGuardrail`, or<br>    create an `InputGuardrail` manually.<br>    Guardrails return a `GuardrailResult`. If `result.tripwire_triggered` is `True`, the agent<br>    execution will immediately stop and a `InputGuardrailTripwireTriggered` exception will be raised<br>    \"\"\"<br>    guardrail_function: Callable[<br>        [RunContextWrapper[TContext], Agent[Any], str | list[TResponseInputItem]],<br>        MaybeAwaitable[GuardrailFunctionOutput],<br>    ]<br>    \"\"\"A function that receives the agent input and the context, and returns a<br>     `GuardrailResult`. The result marks whether the tripwire was triggered, and can optionally<br>     include information about the guardrail's output.<br>    \"\"\"<br>    name: str | None = None<br>    \"\"\"The name of the guardrail, used for tracing. If not provided, we'll use the guardrail<br>    function's name.<br>    \"\"\"<br>    def get_name(self) -> str:<br>        if self.name:<br>            return self.name<br>        return self.guardrail_function.__name__<br>    async def run(<br>        self,<br>        agent: Agent[Any],<br>        input: str | list[TResponseInputItem],<br>        context: RunContextWrapper[TContext],<br>    ) -> InputGuardrailResult:<br>        if not callable(self.guardrail_function):<br>            raise UserError(f\"Guardrail function must be callable, got {self.guardrail_function}\")<br>        output = self.guardrail_function(context, agent, input)<br>        if inspect.isawaitable(output):<br>            return InputGuardrailResult(<br>                guardrail=self,<br>                output=await output,<br>            )<br>        return InputGuardrailResult(<br>            guardrail=self,<br>            output=output,<br>        )<br>``` |\n\n#### guardrail\\_function`instance-attribute`\n\n```md-code__content\nguardrail_function: Callable[\\\n    [\\\n        RunContextWrapper[TContext],\\\n        Agent[Any],\\\n        str | list[TResponseInputItem],\\\n    ],\\\n    MaybeAwaitable[GuardrailFunctionOutput],\\\n]\n\n```\n\nA function that receives the agent input and the context, and returns a\n`GuardrailResult`. The result marks whether the tripwire was triggered, and can optionally\ninclude information about the guardrail's output.\n\n#### name`class-attribute``instance-attribute`\n\n```md-code__content\nname: str | None = None\n\n```\n\nThe name of the guardrail, used for tracing. If not provided, we'll use the guardrail\nfunction's name.\n\n### OutputGuardrail`dataclass`\n\nBases: `Generic[TContext]`\n\nOutput guardrails are checks that run on the final output of an agent.\nThey can be used to do check if the output passes certain validation criteria\n\nYou can use the `@output_guardrail()` decorator to turn a function into an `OutputGuardrail`,\nor create an `OutputGuardrail` manually.\n\nGuardrails return a `GuardrailResult`. If `result.tripwire_triggered` is `True`, a\n`OutputGuardrailTripwireTriggered` exception will be raised.\n\nSource code in `src/agents/guardrail.py`\n\n|     |     |\n| --- | --- |\n| ```<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>169<br>170<br>171<br>172<br>173<br>174<br>175<br>176<br>177<br>178<br>179<br>``` | ```md-code__content<br>@dataclass<br>class OutputGuardrail(Generic[TContext]):<br>    \"\"\"Output guardrails are checks that run on the final output of an agent.<br>    They can be used to do check if the output passes certain validation criteria<br>    You can use the `@output_guardrail()` decorator to turn a function into an `OutputGuardrail`,<br>    or create an `OutputGuardrail` manually.<br>    Guardrails return a `GuardrailResult`. If `result.tripwire_triggered` is `True`, a<br>    `OutputGuardrailTripwireTriggered` exception will be raised.<br>    \"\"\"<br>    guardrail_function: Callable[<br>        [RunContextWrapper[TContext], Agent[Any], Any],<br>        MaybeAwaitable[GuardrailFunctionOutput],<br>    ]<br>    \"\"\"A function that receives the final agent, its output, and the context, and returns a<br>     `GuardrailResult`. The result marks whether the tripwire was triggered, and can optionally<br>     include information about the guardrail's output.<br>    \"\"\"<br>    name: str | None = None<br>    \"\"\"The name of the guardrail, used for tracing. If not provided, we'll use the guardrail<br>    function's name.<br>    \"\"\"<br>    def get_name(self) -> str:<br>        if self.name:<br>            return self.name<br>        return self.guardrail_function.__name__<br>    async def run(<br>        self, context: RunContextWrapper[TContext], agent: Agent[Any], agent_output: Any<br>    ) -> OutputGuardrailResult:<br>        if not callable(self.guardrail_function):<br>            raise UserError(f\"Guardrail function must be callable, got {self.guardrail_function}\")<br>        output = self.guardrail_function(context, agent, agent_output)<br>        if inspect.isawaitable(output):<br>            return OutputGuardrailResult(<br>                guardrail=self,<br>                agent=agent,<br>                agent_output=agent_output,<br>                output=await output,<br>            )<br>        return OutputGuardrailResult(<br>            guardrail=self,<br>            agent=agent,<br>            agent_output=agent_output,<br>            output=output,<br>        )<br>``` |\n\n#### guardrail\\_function`instance-attribute`\n\n```md-code__content\nguardrail_function: Callable[\\\n    [RunContextWrapper[TContext], Agent[Any], Any],\\\n    MaybeAwaitable[GuardrailFunctionOutput],\\\n]\n\n```\n\nA function that receives the final agent, its output, and the context, and returns a\n`GuardrailResult`. The result marks whether the tripwire was triggered, and can optionally\ninclude information about the guardrail's output.\n\n#### name`class-attribute``instance-attribute`\n\n```md-code__content\nname: str | None = None\n\n```\n\nThe name of the guardrail, used for tracing. If not provided, we'll use the guardrail\nfunction's name.\n\n### input\\_guardrail\n\n```md-code__content\ninput_guardrail(\n    func: _InputGuardrailFuncSync[TContext_co],\n) -> InputGuardrail[TContext_co]\n\n```\n\n```md-code__content\ninput_guardrail(\n    func: _InputGuardrailFuncAsync[TContext_co],\n) -> InputGuardrail[TContext_co]\n\n```\n\n```md-code__content\ninput_guardrail(\n    *, name: str | None = None\n) -> Callable[\\\n    [\\\n        _InputGuardrailFuncSync[TContext_co]\\\n        | _InputGuardrailFuncAsync[TContext_co]\\\n    ],\\\n    InputGuardrail[TContext_co],\\\n]\n\n```\n\n```md-code__content\ninput_guardrail(\n    func: _InputGuardrailFuncSync[TContext_co]\n    | _InputGuardrailFuncAsync[TContext_co]\n    | None = None,\n    *,\n    name: str | None = None,\n) -> (\n    InputGuardrail[TContext_co]\n    | Callable[\\\n        [\\\n            _InputGuardrailFuncSync[TContext_co]\\\n            | _InputGuardrailFuncAsync[TContext_co]\\\n        ],\\\n        InputGuardrail[TContext_co],\\\n    ]\n)\n\n```\n\nDecorator that transforms a sync or async function into an `InputGuardrail`.\nIt can be used directly (no parentheses) or with keyword args, e.g.:\n\n```\n@input_guardrail\ndef my_sync_guardrail(...): ...\n\n@input_guardrail(name=\"guardrail_name\")\nasync def my_async_guardrail(...): ...\n\n```\n\nSource code in `src/agents/guardrail.py`\n\n|     |     |\n| --- | --- |\n| ```<br>217<br>218<br>219<br>220<br>221<br>222<br>223<br>224<br>225<br>226<br>227<br>228<br>229<br>230<br>231<br>232<br>233<br>234<br>235<br>236<br>237<br>238<br>239<br>240<br>241<br>242<br>243<br>244<br>245<br>246<br>247<br>248<br>249<br>250<br>251<br>``` | ```md-code__content<br>def input_guardrail(<br>    func: _InputGuardrailFuncSync[TContext_co]<br>    | _InputGuardrailFuncAsync[TContext_co]<br>    | None = None,<br>    *,<br>    name: str | None = None,<br>) -> (<br>    InputGuardrail[TContext_co]<br>    | Callable[<br>        [_InputGuardrailFuncSync[TContext_co] | _InputGuardrailFuncAsync[TContext_co]],<br>        InputGuardrail[TContext_co],<br>    ]<br>):<br>    \"\"\"<br>    Decorator that transforms a sync or async function into an `InputGuardrail`.<br>    It can be used directly (no parentheses) or with keyword args, e.g.:<br>        @input_guardrail<br>        def my_sync_guardrail(...): ...<br>        @input_guardrail(name=\"guardrail_name\")<br>        async def my_async_guardrail(...): ...<br>    \"\"\"<br>    def decorator(<br>        f: _InputGuardrailFuncSync[TContext_co] | _InputGuardrailFuncAsync[TContext_co],<br>    ) -> InputGuardrail[TContext_co]:<br>        return InputGuardrail(guardrail_function=f, name=name)<br>    if func is not None:<br>        # Decorator was used without parentheses<br>        return decorator(func)<br>    # Decorator used with keyword arguments<br>    return decorator<br>``` |\n\n### output\\_guardrail\n\n```md-code__content\noutput_guardrail(\n    func: _OutputGuardrailFuncSync[TContext_co],\n) -> OutputGuardrail[TContext_co]\n\n```\n\n```md-code__content\noutput_guardrail(\n    func: _OutputGuardrailFuncAsync[TContext_co],\n) -> OutputGuardrail[TContext_co]\n\n```\n\n```md-code__content\noutput_guardrail(\n    *, name: str | None = None\n) -> Callable[\\\n    [\\\n        _OutputGuardrailFuncSync[TContext_co]\\\n        | _OutputGuardrailFuncAsync[TContext_co]\\\n    ],\\\n    OutputGuardrail[TContext_co],\\\n]\n\n```\n\n```md-code__content\noutput_guardrail(\n    func: _OutputGuardrailFuncSync[TContext_co]\n    | _OutputGuardrailFuncAsync[TContext_co]\n    | None = None,\n    *,\n    name: str | None = None,\n) -> (\n    OutputGuardrail[TContext_co]\n    | Callable[\\\n        [\\\n            _OutputGuardrailFuncSync[TContext_co]\\\n            | _OutputGuardrailFuncAsync[TContext_co]\\\n        ],\\\n        OutputGuardrail[TContext_co],\\\n    ]\n)\n\n```\n\nDecorator that transforms a sync or async function into an `OutputGuardrail`.\nIt can be used directly (no parentheses) or with keyword args, e.g.:\n\n```\n@output_guardrail\ndef my_sync_guardrail(...): ...\n\n@output_guardrail(name=\"guardrail_name\")\nasync def my_async_guardrail(...): ...\n\n```\n\nSource code in `src/agents/guardrail.py`\n\n|     |     |\n| --- | --- |\n| ```<br>286<br>287<br>288<br>289<br>290<br>291<br>292<br>293<br>294<br>295<br>296<br>297<br>298<br>299<br>300<br>301<br>302<br>303<br>304<br>305<br>306<br>307<br>308<br>309<br>310<br>311<br>312<br>313<br>314<br>315<br>316<br>317<br>318<br>319<br>320<br>``` | ```md-code__content<br>def output_guardrail(<br>    func: _OutputGuardrailFuncSync[TContext_co]<br>    | _OutputGuardrailFuncAsync[TContext_co]<br>    | None = None,<br>    *,<br>    name: str | None = None,<br>) -> (<br>    OutputGuardrail[TContext_co]<br>    | Callable[<br>        [_OutputGuardrailFuncSync[TContext_co] | _OutputGuardrailFuncAsync[TContext_co]],<br>        OutputGuardrail[TContext_co],<br>    ]<br>):<br>    \"\"\"<br>    Decorator that transforms a sync or async function into an `OutputGuardrail`.<br>    It can be used directly (no parentheses) or with keyword args, e.g.:<br>        @output_guardrail<br>        def my_sync_guardrail(...): ...<br>        @output_guardrail(name=\"guardrail_name\")<br>        async def my_async_guardrail(...): ...<br>    \"\"\"<br>    def decorator(<br>        f: _OutputGuardrailFuncSync[TContext_co] | _OutputGuardrailFuncAsync[TContext_co],<br>    ) -> OutputGuardrail[TContext_co]:<br>        return OutputGuardrail(guardrail_function=f, name=name)<br>    if func is not None:<br>        # Decorator was used without parentheses<br>        return decorator(func)<br>    # Decorator used with keyword arguments<br>    return decorator<br>``` |",
  "metadata": {
    "generator": "mkdocs-1.6.1, mkdocs-material-9.6.11",
    "language": "en",
    "favicon": "https://openai.github.io/openai-agents-python/images/favicon-platform.svg",
    "title": "Guardrails - OpenAI Agents SDK",
    "viewport": "width=device-width,initial-scale=1",
    "scrapeId": "54750bf7-431b-40e4-b433-901a54d30a89",
    "sourceURL": "https://openai.github.io/openai-agents-python/ref/guardrail/",
    "url": "https://openai.github.io/openai-agents-python/ref/guardrail/",
    "statusCode": 200,
    "contentType": "text/html; charset=utf-8",
    "proxyUsed": "basic"
  }
}