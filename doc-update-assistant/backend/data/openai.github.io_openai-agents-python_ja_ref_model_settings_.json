{
  "markdown": "[コンテンツにスキップ](https://openai.github.io/openai-agents-python/ja/ref/model_settings/#model-settings)\n\n# `Model settings`\n\n### ModelSettings`dataclass`\n\nSettings to use when calling an LLM.\n\nThis class holds optional model configuration parameters (e.g. temperature,\ntop\\_p, penalties, truncation, etc.).\n\nNot all models/providers support all of these parameters, so please check the API documentation\nfor the specific model and provider you are using.\n\nSource code in `src/agents/model_settings.py`\n\n|     |     |\n| --- | --- |\n| ```<br> 12<br> 13<br> 14<br> 15<br> 16<br> 17<br> 18<br> 19<br> 20<br> 21<br> 22<br> 23<br> 24<br> 25<br> 26<br> 27<br> 28<br> 29<br> 30<br> 31<br> 32<br> 33<br> 34<br> 35<br> 36<br> 37<br> 38<br> 39<br> 40<br> 41<br> 42<br> 43<br> 44<br> 45<br> 46<br> 47<br> 48<br> 49<br> 50<br> 51<br> 52<br> 53<br> 54<br> 55<br> 56<br> 57<br> 58<br> 59<br> 60<br> 61<br> 62<br> 63<br> 64<br> 65<br> 66<br> 67<br> 68<br> 69<br> 70<br> 71<br> 72<br> 73<br> 74<br> 75<br> 76<br> 77<br> 78<br> 79<br> 80<br> 81<br> 82<br> 83<br> 84<br> 85<br> 86<br> 87<br> 88<br> 89<br> 90<br> 91<br> 92<br> 93<br> 94<br> 95<br> 96<br> 97<br> 98<br> 99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>``` | ```md-code__content<br>@dataclass<br>class ModelSettings:<br>    \"\"\"Settings to use when calling an LLM.<br>    This class holds optional model configuration parameters (e.g. temperature,<br>    top_p, penalties, truncation, etc.).<br>    Not all models/providers support all of these parameters, so please check the API documentation<br>    for the specific model and provider you are using.<br>    \"\"\"<br>    temperature: float | None = None<br>    \"\"\"The temperature to use when calling the model.\"\"\"<br>    top_p: float | None = None<br>    \"\"\"The top_p to use when calling the model.\"\"\"<br>    frequency_penalty: float | None = None<br>    \"\"\"The frequency penalty to use when calling the model.\"\"\"<br>    presence_penalty: float | None = None<br>    \"\"\"The presence penalty to use when calling the model.\"\"\"<br>    tool_choice: Literal[\"auto\", \"required\", \"none\"] | str | None = None<br>    \"\"\"The tool choice to use when calling the model.\"\"\"<br>    parallel_tool_calls: bool | None = None<br>    \"\"\"Whether to use parallel tool calls when calling the model.<br>    Defaults to False if not provided.\"\"\"<br>    truncation: Literal[\"auto\", \"disabled\"] | None = None<br>    \"\"\"The truncation strategy to use when calling the model.\"\"\"<br>    max_tokens: int | None = None<br>    \"\"\"The maximum number of output tokens to generate.\"\"\"<br>    reasoning: Reasoning | None = None<br>    \"\"\"Configuration options for<br>    [reasoning models](https://platform.openai.com/docs/guides/reasoning).<br>    \"\"\"<br>    metadata: dict[str, str] | None = None<br>    \"\"\"Metadata to include with the model response call.\"\"\"<br>    store: bool | None = None<br>    \"\"\"Whether to store the generated model response for later retrieval.<br>    Defaults to True if not provided.\"\"\"<br>    include_usage: bool | None = None<br>    \"\"\"Whether to include usage chunk.<br>    Defaults to True if not provided.\"\"\"<br>    extra_query: Query | None = None<br>    \"\"\"Additional query fields to provide with the request.<br>    Defaults to None if not provided.\"\"\"<br>    extra_body: Body | None = None<br>    \"\"\"Additional body fields to provide with the request.<br>    Defaults to None if not provided.\"\"\"<br>    extra_headers: Headers | None = None<br>    \"\"\"Additional headers to provide with the request.<br>    Defaults to None if not provided.\"\"\"<br>    extra_args: dict[str, Any] | None = None<br>    \"\"\"Arbitrary keyword arguments to pass to the model API call.<br>    These will be passed directly to the underlying model provider's API.<br>    Use with caution as not all models support all parameters.\"\"\"<br>    def resolve(self, override: ModelSettings | None) -> ModelSettings:<br>        \"\"\"Produce a new ModelSettings by overlaying any non-None values from the<br>        override on top of this instance.\"\"\"<br>        if override is None:<br>            return self<br>        changes = {<br>            field.name: getattr(override, field.name)<br>            for field in fields(self)<br>            if getattr(override, field.name) is not None<br>        }<br>        # Handle extra_args merging specially - merge dictionaries instead of replacing<br>        if self.extra_args is not None or override.extra_args is not None:<br>            merged_args = {}<br>            if self.extra_args:<br>                merged_args.update(self.extra_args)<br>            if override.extra_args:<br>                merged_args.update(override.extra_args)<br>            changes[\"extra_args\"] = merged_args if merged_args else None<br>        return replace(self, **changes)<br>    def to_json_dict(self) -> dict[str, Any]:<br>        dataclass_dict = dataclasses.asdict(self)<br>        json_dict: dict[str, Any] = {}<br>        for field_name, value in dataclass_dict.items():<br>            if isinstance(value, BaseModel):<br>                json_dict[field_name] = value.model_dump(mode=\"json\")<br>            else:<br>                json_dict[field_name] = value<br>        return json_dict<br>``` |\n\n#### temperature`class-attribute``instance-attribute`\n\n```md-code__content\ntemperature: float | None = None\n\n```\n\nThe temperature to use when calling the model.\n\n#### top\\_p`class-attribute``instance-attribute`\n\n```md-code__content\ntop_p: float | None = None\n\n```\n\nThe top\\_p to use when calling the model.\n\n#### frequency\\_penalty`class-attribute``instance-attribute`\n\n```md-code__content\nfrequency_penalty: float | None = None\n\n```\n\nThe frequency penalty to use when calling the model.\n\n#### presence\\_penalty`class-attribute``instance-attribute`\n\n```md-code__content\npresence_penalty: float | None = None\n\n```\n\nThe presence penalty to use when calling the model.\n\n#### tool\\_choice`class-attribute``instance-attribute`\n\n```md-code__content\ntool_choice: (\n    Literal[\"auto\", \"required\", \"none\"] | str | None\n) = None\n\n```\n\nThe tool choice to use when calling the model.\n\n#### parallel\\_tool\\_calls`class-attribute``instance-attribute`\n\n```md-code__content\nparallel_tool_calls: bool | None = None\n\n```\n\nWhether to use parallel tool calls when calling the model.\nDefaults to False if not provided.\n\n#### truncation`class-attribute``instance-attribute`\n\n```md-code__content\ntruncation: Literal['auto', 'disabled'] | None = None\n\n```\n\nThe truncation strategy to use when calling the model.\n\n#### max\\_tokens`class-attribute``instance-attribute`\n\n```md-code__content\nmax_tokens: int | None = None\n\n```\n\nThe maximum number of output tokens to generate.\n\n#### reasoning`class-attribute``instance-attribute`\n\n```md-code__content\nreasoning: Reasoning | None = None\n\n```\n\nConfiguration options for\n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\n\n#### metadata`class-attribute``instance-attribute`\n\n```md-code__content\nmetadata: dict[str, str] | None = None\n\n```\n\nMetadata to include with the model response call.\n\n#### store`class-attribute``instance-attribute`\n\n```md-code__content\nstore: bool | None = None\n\n```\n\nWhether to store the generated model response for later retrieval.\nDefaults to True if not provided.\n\n#### include\\_usage`class-attribute``instance-attribute`\n\n```md-code__content\ninclude_usage: bool | None = None\n\n```\n\nWhether to include usage chunk.\nDefaults to True if not provided.\n\n#### extra\\_query`class-attribute``instance-attribute`\n\n```md-code__content\nextra_query: Query | None = None\n\n```\n\nAdditional query fields to provide with the request.\nDefaults to None if not provided.\n\n#### extra\\_body`class-attribute``instance-attribute`\n\n```md-code__content\nextra_body: Body | None = None\n\n```\n\nAdditional body fields to provide with the request.\nDefaults to None if not provided.\n\n#### extra\\_headers`class-attribute``instance-attribute`\n\n```md-code__content\nextra_headers: Headers | None = None\n\n```\n\nAdditional headers to provide with the request.\nDefaults to None if not provided.\n\n#### extra\\_args`class-attribute``instance-attribute`\n\n```md-code__content\nextra_args: dict[str, Any] | None = None\n\n```\n\nArbitrary keyword arguments to pass to the model API call.\nThese will be passed directly to the underlying model provider's API.\nUse with caution as not all models support all parameters.\n\n#### resolve\n\n```md-code__content\nresolve(override: ModelSettings | None) -> ModelSettings\n\n```\n\nProduce a new ModelSettings by overlaying any non-None values from the\noverride on top of this instance.\n\nSource code in `src/agents/model_settings.py`\n\n|     |     |\n| --- | --- |\n| ```<br> 81<br> 82<br> 83<br> 84<br> 85<br> 86<br> 87<br> 88<br> 89<br> 90<br> 91<br> 92<br> 93<br> 94<br> 95<br> 96<br> 97<br> 98<br> 99<br>100<br>101<br>102<br>``` | ```md-code__content<br>def resolve(self, override: ModelSettings | None) -> ModelSettings:<br>    \"\"\"Produce a new ModelSettings by overlaying any non-None values from the<br>    override on top of this instance.\"\"\"<br>    if override is None:<br>        return self<br>    changes = {<br>        field.name: getattr(override, field.name)<br>        for field in fields(self)<br>        if getattr(override, field.name) is not None<br>    }<br>    # Handle extra_args merging specially - merge dictionaries instead of replacing<br>    if self.extra_args is not None or override.extra_args is not None:<br>        merged_args = {}<br>        if self.extra_args:<br>            merged_args.update(self.extra_args)<br>        if override.extra_args:<br>            merged_args.update(override.extra_args)<br>        changes[\"extra_args\"] = merged_args if merged_args else None<br>    return replace(self, **changes)<br>``` |",
  "metadata": {
    "generator": "mkdocs-1.6.1, mkdocs-material-9.6.11",
    "favicon": "https://openai.github.io/openai-agents-python/images/favicon-platform.svg",
    "title": "Model settings - OpenAI Agents SDK",
    "viewport": "width=device-width,initial-scale=1",
    "language": "ja",
    "scrapeId": "0176ff92-4163-4101-9dd0-51bde96d460f",
    "sourceURL": "https://openai.github.io/openai-agents-python/ja/ref/model_settings/",
    "url": "https://openai.github.io/openai-agents-python/ja/ref/model_settings/",
    "statusCode": 200,
    "contentType": "text/html; charset=utf-8",
    "proxyUsed": "basic"
  }
}