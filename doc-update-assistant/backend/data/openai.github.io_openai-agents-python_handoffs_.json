{
  "markdown": "[Skip to content](https://openai.github.io/openai-agents-python/handoffs/#handoffs)\n\n# Handoffs\n\nHandoffs allow an agent to delegate tasks to another agent. This is particularly useful in scenarios where different agents specialize in distinct areas. For example, a customer support app might have agents that each specifically handle tasks like order status, refunds, FAQs, etc.\n\nHandoffs are represented as tools to the LLM. So if there's a handoff to an agent named `Refund Agent`, the tool would be called `transfer_to_refund_agent`.\n\n## Creating a handoff\n\nAll agents have a [`handoffs`](https://openai.github.io/openai-agents-python/ref/agent/#agents.agent.Agent.handoffs \"handoffs            class-attribute       instance-attribute   \") param, which can either take an `Agent` directly, or a `Handoff` object that customizes the Handoff.\n\nYou can create a handoff using the [`handoff()`](https://openai.github.io/openai-agents-python/ref/handoffs/#agents.handoffs.handoff \"handoff\") function provided by the Agents SDK. This function allows you to specify the agent to hand off to, along with optional overrides and input filters.\n\n### Basic Usage\n\nHere's how you can create a simple handoff:\n\n```md-code__content\nfrom agents import Agent, handoff\n\nbilling_agent = Agent(name=\"Billing agent\")\nrefund_agent = Agent(name=\"Refund agent\")\n\ntriage_agent = Agent(name=\"Triage agent\", handoffs=[billing_agent, handoff(refund_agent)])\n\n```\n\n### Customizing handoffs via the `handoff()` function\n\nThe [`handoff()`](https://openai.github.io/openai-agents-python/ref/handoffs/#agents.handoffs.handoff \"handoff\") function lets you customize things.\n\n- `agent`: This is the agent to which things will be handed off.\n- `tool_name_override`: By default, the `Handoff.default_tool_name()` function is used, which resolves to `transfer_to_<agent_name>`. You can override this.\n- `tool_description_override`: Override the default tool description from `Handoff.default_tool_description()`\n- `on_handoff`: A callback function executed when the handoff is invoked. This is useful for things like kicking off some data fetching as soon as you know a handoff is being invoked. This function receives the agent context, and can optionally also receive LLM generated input. The input data is controlled by the `input_type` param.\n- `input_type`: The type of input expected by the handoff (optional).\n- `input_filter`: This lets you filter the input received by the next agent. See below for more.\n\n```md-code__content\nfrom agents import Agent, handoff, RunContextWrapper\n\ndef on_handoff(ctx: RunContextWrapper[None]):\n    print(\"Handoff called\")\n\nagent = Agent(name=\"My agent\")\n\nhandoff_obj = handoff(\n    agent=agent,\n    on_handoff=on_handoff,\n    tool_name_override=\"custom_handoff_tool\",\n    tool_description_override=\"Custom description\",\n)\n\n```\n\n## Handoff inputs\n\nIn certain situations, you want the LLM to provide some data when it calls a handoff. For example, imagine a handoff to an \"Escalation agent\". You might want a reason to be provided, so you can log it.\n\n```md-code__content\nfrom pydantic import BaseModel\n\nfrom agents import Agent, handoff, RunContextWrapper\n\nclass EscalationData(BaseModel):\n    reason: str\n\nasync def on_handoff(ctx: RunContextWrapper[None], input_data: EscalationData):\n    print(f\"Escalation agent called with reason: {input_data.reason}\")\n\nagent = Agent(name=\"Escalation agent\")\n\nhandoff_obj = handoff(\n    agent=agent,\n    on_handoff=on_handoff,\n    input_type=EscalationData,\n)\n\n```\n\n## Input filters\n\nWhen a handoff occurs, it's as though the new agent takes over the conversation, and gets to see the entire previous conversation history. If you want to change this, you can set an [`input_filter`](https://openai.github.io/openai-agents-python/ref/handoffs/#agents.handoffs.Handoff.input_filter \"input_filter            class-attribute       instance-attribute   \"). An input filter is a function that receives the existing input via a [`HandoffInputData`](https://openai.github.io/openai-agents-python/ref/handoffs/#agents.handoffs.HandoffInputData \"HandoffInputData            dataclass   \"), and must return a new `HandoffInputData`.\n\nThere are some common patterns (for example removing all tool calls from the history), which are implemented for you in [`agents.extensions.handoff_filters`](https://openai.github.io/openai-agents-python/ref/extensions/handoff_filters/#agents.extensions.handoff_filters)\n\n```md-code__content\nfrom agents import Agent, handoff\nfrom agents.extensions import handoff_filters\n\nagent = Agent(name=\"FAQ agent\")\n\nhandoff_obj = handoff(\n    agent=agent,\n    input_filter=handoff_filters.remove_all_tools,\n)\n\n```\n\n## Recommended prompts\n\nTo make sure that LLMs understand handoffs properly, we recommend including information about handoffs in your agents. We have a suggested prefix in [`agents.extensions.handoff_prompt.RECOMMENDED_PROMPT_PREFIX`](https://openai.github.io/openai-agents-python/ref/extensions/handoff_prompt/#agents.extensions.handoff_prompt.RECOMMENDED_PROMPT_PREFIX \"RECOMMENDED_PROMPT_PREFIX            module-attribute   \"), or you can call [`agents.extensions.handoff_prompt.prompt_with_handoff_instructions`](https://openai.github.io/openai-agents-python/ref/extensions/handoff_prompt/#agents.extensions.handoff_prompt.prompt_with_handoff_instructions \"prompt_with_handoff_instructions\") to automatically add recommended data to your prompts.\n\n```md-code__content\nfrom agents import Agent\nfrom agents.extensions.handoff_prompt import RECOMMENDED_PROMPT_PREFIX\n\nbilling_agent = Agent(\n    name=\"Billing agent\",\n    instructions=f\"\"\"{RECOMMENDED_PROMPT_PREFIX}\n    <Fill in the rest of your prompt here>.\"\"\",\n)\n\n```",
  "metadata": {
    "title": "Handoffs - OpenAI Agents SDK",
    "language": "en",
    "viewport": "width=device-width,initial-scale=1",
    "favicon": "https://openai.github.io/openai-agents-python/images/favicon-platform.svg",
    "generator": "mkdocs-1.6.1, mkdocs-material-9.6.11",
    "scrapeId": "ab818c14-a63c-4e0d-a30a-11a55fb412e9",
    "sourceURL": "https://openai.github.io/openai-agents-python/handoffs/",
    "url": "https://openai.github.io/openai-agents-python/handoffs/",
    "statusCode": 200,
    "contentType": "text/html; charset=utf-8",
    "proxyUsed": "basic"
  }
}