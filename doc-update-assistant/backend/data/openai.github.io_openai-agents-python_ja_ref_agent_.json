{
  "markdown": "[コンテンツにスキップ](https://openai.github.io/openai-agents-python/ja/ref/agent/#agents)\n\n# `Agents`\n\n### ToolsToFinalOutputFunction`module-attribute`\n\n```md-code__content\nToolsToFinalOutputFunction: TypeAlias = Callable[\\\n    [RunContextWrapper[TContext], list[FunctionToolResult]],\\\n    MaybeAwaitable[ToolsToFinalOutputResult],\\\n]\n\n```\n\nA function that takes a run context and a list of tool results, and returns a\n`ToolsToFinalOutputResult`.\n\n### ToolsToFinalOutputResult`dataclass`\n\nSource code in `src/agents/agent.py`\n\n|     |     |\n| --- | --- |\n| ```<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>``` | ```md-code__content<br>@dataclass<br>class ToolsToFinalOutputResult:<br>    is_final_output: bool<br>    \"\"\"Whether this is the final output. If False, the LLM will run again and receive the tool call<br>    output.<br>    \"\"\"<br>    final_output: Any | None = None<br>    \"\"\"The final output. Can be None if `is_final_output` is False, otherwise must match the<br>    `output_type` of the agent.<br>    \"\"\"<br>``` |\n\n#### is\\_final\\_output`instance-attribute`\n\n```md-code__content\nis_final_output: bool\n\n```\n\nWhether this is the final output. If False, the LLM will run again and receive the tool call\noutput.\n\n#### final\\_output`class-attribute``instance-attribute`\n\n```md-code__content\nfinal_output: Any | None = None\n\n```\n\nThe final output. Can be None if `is_final_output` is False, otherwise must match the\n`output_type` of the agent.\n\n### StopAtTools\n\nBases: `TypedDict`\n\nSource code in `src/agents/agent.py`\n\n|     |     |\n| --- | --- |\n| ```<br>55<br>56<br>57<br>``` | ```md-code__content<br>class StopAtTools(TypedDict):<br>    stop_at_tool_names: list[str]<br>    \"\"\"A list of tool names, any of which will stop the agent from running further.\"\"\"<br>``` |\n\n#### stop\\_at\\_tool\\_names`instance-attribute`\n\n```md-code__content\nstop_at_tool_names: list[str]\n\n```\n\nA list of tool names, any of which will stop the agent from running further.\n\n### MCPConfig\n\nBases: `TypedDict`\n\nConfiguration for MCP servers.\n\nSource code in `src/agents/agent.py`\n\n|     |     |\n| --- | --- |\n| ```<br>60<br>61<br>62<br>63<br>64<br>65<br>66<br>``` | ```md-code__content<br>class MCPConfig(TypedDict):<br>    \"\"\"Configuration for MCP servers.\"\"\"<br>    convert_schemas_to_strict: NotRequired[bool]<br>    \"\"\"If True, we will attempt to convert the MCP schemas to strict-mode schemas. This is a<br>    best-effort conversion, so some schemas may not be convertible. Defaults to False.<br>    \"\"\"<br>``` |\n\n#### convert\\_schemas\\_to\\_strict`instance-attribute`\n\n```md-code__content\nconvert_schemas_to_strict: NotRequired[bool]\n\n```\n\nIf True, we will attempt to convert the MCP schemas to strict-mode schemas. This is a\nbest-effort conversion, so some schemas may not be convertible. Defaults to False.\n\n### Agent`dataclass`\n\nBases: `Generic[TContext]`\n\nAn agent is an AI model configured with instructions, tools, guardrails, handoffs and more.\n\nWe strongly recommend passing `instructions`, which is the \"system prompt\" for the agent. In\naddition, you can pass `handoff_description`, which is a human-readable description of the\nagent, used when the agent is used inside tools/handoffs.\n\nAgents are generic on the context type. The context is a (mutable) object you create. It is\npassed to tool functions, handoffs, guardrails, etc.\n\nSource code in `src/agents/agent.py`\n\n|     |     |\n| --- | --- |\n| ```<br> 69<br> 70<br> 71<br> 72<br> 73<br> 74<br> 75<br> 76<br> 77<br> 78<br> 79<br> 80<br> 81<br> 82<br> 83<br> 84<br> 85<br> 86<br> 87<br> 88<br> 89<br> 90<br> 91<br> 92<br> 93<br> 94<br> 95<br> 96<br> 97<br> 98<br> 99<br>100<br>101<br>102<br>103<br>104<br>105<br>106<br>107<br>108<br>109<br>110<br>111<br>112<br>113<br>114<br>115<br>116<br>117<br>118<br>119<br>120<br>121<br>122<br>123<br>124<br>125<br>126<br>127<br>128<br>129<br>130<br>131<br>132<br>133<br>134<br>135<br>136<br>137<br>138<br>139<br>140<br>141<br>142<br>143<br>144<br>145<br>146<br>147<br>148<br>149<br>150<br>151<br>152<br>153<br>154<br>155<br>156<br>157<br>158<br>159<br>160<br>161<br>162<br>163<br>164<br>165<br>166<br>167<br>168<br>169<br>170<br>171<br>172<br>173<br>174<br>175<br>176<br>177<br>178<br>179<br>180<br>181<br>182<br>183<br>184<br>185<br>186<br>187<br>188<br>189<br>190<br>191<br>192<br>193<br>194<br>195<br>196<br>197<br>198<br>199<br>200<br>201<br>202<br>203<br>204<br>205<br>206<br>207<br>208<br>209<br>210<br>211<br>212<br>213<br>214<br>215<br>216<br>217<br>218<br>219<br>220<br>221<br>222<br>223<br>224<br>225<br>226<br>227<br>228<br>229<br>230<br>231<br>232<br>233<br>234<br>235<br>236<br>237<br>238<br>239<br>240<br>241<br>242<br>243<br>244<br>245<br>246<br>247<br>248<br>249<br>250<br>251<br>252<br>253<br>254<br>255<br>256<br>257<br>258<br>259<br>260<br>261<br>262<br>263<br>264<br>265<br>266<br>267<br>268<br>269<br>270<br>271<br>272<br>273<br>274<br>275<br>276<br>277<br>278<br>279<br>280<br>281<br>282<br>``` | ````md-code__content<br>@dataclass<br>class Agent(Generic[TContext]):<br>    \"\"\"An agent is an AI model configured with instructions, tools, guardrails, handoffs and more.<br>    We strongly recommend passing `instructions`, which is the \"system prompt\" for the agent. In<br>    addition, you can pass `handoff_description`, which is a human-readable description of the<br>    agent, used when the agent is used inside tools/handoffs.<br>    Agents are generic on the context type. The context is a (mutable) object you create. It is<br>    passed to tool functions, handoffs, guardrails, etc.<br>    \"\"\"<br>    name: str<br>    \"\"\"The name of the agent.\"\"\"<br>    instructions: (<br>        str<br>        | Callable[<br>            [RunContextWrapper[TContext], Agent[TContext]],<br>            MaybeAwaitable[str],<br>        ]<br>        | None<br>    ) = None<br>    \"\"\"The instructions for the agent. Will be used as the \"system prompt\" when this agent is<br>    invoked. Describes what the agent should do, and how it responds.<br>    Can either be a string, or a function that dynamically generates instructions for the agent. If<br>    you provide a function, it will be called with the context and the agent instance. It must<br>    return a string.<br>    \"\"\"<br>    prompt: Prompt | DynamicPromptFunction | None = None<br>    \"\"\"A prompt object (or a function that returns a Prompt). Prompts allow you to dynamically<br>    configure the instructions, tools and other config for an agent outside of your code. Only<br>    usable with OpenAI models, using the Responses API.<br>    \"\"\"<br>    handoff_description: str | None = None<br>    \"\"\"A description of the agent. This is used when the agent is used as a handoff, so that an<br>    LLM knows what it does and when to invoke it.<br>    \"\"\"<br>    handoffs: list[Agent[Any] | Handoff[TContext]] = field(default_factory=list)<br>    \"\"\"Handoffs are sub-agents that the agent can delegate to. You can provide a list of handoffs,<br>    and the agent can choose to delegate to them if relevant. Allows for separation of concerns and<br>    modularity.<br>    \"\"\"<br>    model: str | Model | None = None<br>    \"\"\"The model implementation to use when invoking the LLM.<br>    By default, if not set, the agent will use the default model configured in<br>    `openai_provider.DEFAULT_MODEL` (currently \"gpt-4o\").<br>    \"\"\"<br>    model_settings: ModelSettings = field(default_factory=ModelSettings)<br>    \"\"\"Configures model-specific tuning parameters (e.g. temperature, top_p).<br>    \"\"\"<br>    tools: list[Tool] = field(default_factory=list)<br>    \"\"\"A list of tools that the agent can use.\"\"\"<br>    mcp_servers: list[MCPServer] = field(default_factory=list)<br>    \"\"\"A list of [Model Context Protocol](https://modelcontextprotocol.io/) servers that<br>    the agent can use. Every time the agent runs, it will include tools from these servers in the<br>    list of available tools.<br>    NOTE: You are expected to manage the lifecycle of these servers. Specifically, you must call<br>    `server.connect()` before passing it to the agent, and `server.cleanup()` when the server is no<br>    longer needed.<br>    \"\"\"<br>    mcp_config: MCPConfig = field(default_factory=lambda: MCPConfig())<br>    \"\"\"Configuration for MCP servers.\"\"\"<br>    input_guardrails: list[InputGuardrail[TContext]] = field(default_factory=list)<br>    \"\"\"A list of checks that run in parallel to the agent's execution, before generating a<br>    response. Runs only if the agent is the first agent in the chain.<br>    \"\"\"<br>    output_guardrails: list[OutputGuardrail[TContext]] = field(default_factory=list)<br>    \"\"\"A list of checks that run on the final output of the agent, after generating a response.<br>    Runs only if the agent produces a final output.<br>    \"\"\"<br>    output_type: type[Any] | AgentOutputSchemaBase | None = None<br>    \"\"\"The type of the output object. If not provided, the output will be `str`. In most cases,<br>    you should pass a regular Python type (e.g. a dataclass, Pydantic model, TypedDict, etc).<br>    You can customize this in two ways:<br>    1. If you want non-strict schemas, pass `AgentOutputSchema(MyClass, strict_json_schema=False)`.<br>    2. If you want to use a custom JSON schema (i.e. without using the SDK's automatic schema)<br>       creation, subclass and pass an `AgentOutputSchemaBase` subclass.<br>    \"\"\"<br>    hooks: AgentHooks[TContext] | None = None<br>    \"\"\"A class that receives callbacks on various lifecycle events for this agent.<br>    \"\"\"<br>    tool_use_behavior: (<br>        Literal[\"run_llm_again\", \"stop_on_first_tool\"] | StopAtTools | ToolsToFinalOutputFunction<br>    ) = \"run_llm_again\"<br>    \"\"\"This lets you configure how tool use is handled.<br>    - \"run_llm_again\": The default behavior. Tools are run, and then the LLM receives the results<br>        and gets to respond.<br>    - \"stop_on_first_tool\": The output of the first tool call is used as the final output. This<br>        means that the LLM does not process the result of the tool call.<br>    - A list of tool names: The agent will stop running if any of the tools in the list are called.<br>        The final output will be the output of the first matching tool call. The LLM does not<br>        process the result of the tool call.<br>    - A function: If you pass a function, it will be called with the run context and the list of<br>      tool results. It must return a `ToolToFinalOutputResult`, which determines whether the tool<br>      calls result in a final output.<br>      NOTE: This configuration is specific to FunctionTools. Hosted tools, such as file search,<br>      web search, etc are always processed by the LLM.<br>    \"\"\"<br>    reset_tool_choice: bool = True<br>    \"\"\"Whether to reset the tool choice to the default value after a tool has been called. Defaults<br>    to True. This ensures that the agent doesn't enter an infinite loop of tool usage.\"\"\"<br>    def clone(self, **kwargs: Any) -> Agent[TContext]:<br>        \"\"\"Make a copy of the agent, with the given arguments changed. For example, you could do:<br>        ```<br>        new_agent = agent.clone(instructions=\"New instructions\")<br>        ```<br>        \"\"\"<br>        return dataclasses.replace(self, **kwargs)<br>    def as_tool(<br>        self,<br>        tool_name: str | None,<br>        tool_description: str | None,<br>        custom_output_extractor: Callable[[RunResult], Awaitable[str]] | None = None,<br>    ) -> Tool:<br>        \"\"\"Transform this agent into a tool, callable by other agents.<br>        This is different from handoffs in two ways:<br>        1. In handoffs, the new agent receives the conversation history. In this tool, the new agent<br>           receives generated input.<br>        2. In handoffs, the new agent takes over the conversation. In this tool, the new agent is<br>           called as a tool, and the conversation is continued by the original agent.<br>        Args:<br>            tool_name: The name of the tool. If not provided, the agent's name will be used.<br>            tool_description: The description of the tool, which should indicate what it does and<br>                when to use it.<br>            custom_output_extractor: A function that extracts the output from the agent. If not<br>                provided, the last message from the agent will be used.<br>        \"\"\"<br>        @function_tool(<br>            name_override=tool_name or _transforms.transform_string_function_style(self.name),<br>            description_override=tool_description or \"\",<br>        )<br>        async def run_agent(context: RunContextWrapper, input: str) -> str:<br>            from .run import Runner<br>            output = await Runner.run(<br>                starting_agent=self,<br>                input=input,<br>                context=context.context,<br>            )<br>            if custom_output_extractor:<br>                return await custom_output_extractor(output)<br>            return ItemHelpers.text_message_outputs(output.new_items)<br>        return run_agent<br>    async def get_system_prompt(self, run_context: RunContextWrapper[TContext]) -> str | None:<br>        \"\"\"Get the system prompt for the agent.\"\"\"<br>        if isinstance(self.instructions, str):<br>            return self.instructions<br>        elif callable(self.instructions):<br>            if inspect.iscoroutinefunction(self.instructions):<br>                return await cast(Awaitable[str], self.instructions(run_context, self))<br>            else:<br>                return cast(str, self.instructions(run_context, self))<br>        elif self.instructions is not None:<br>            logger.error(f\"Instructions must be a string or a function, got {self.instructions}\")<br>        return None<br>    async def get_prompt(<br>        self, run_context: RunContextWrapper[TContext]<br>    ) -> ResponsePromptParam | None:<br>        \"\"\"Get the prompt for the agent.\"\"\"<br>        return await PromptUtil.to_model_input(self.prompt, run_context, self)<br>    async def get_mcp_tools(self) -> list[Tool]:<br>        \"\"\"Fetches the available tools from the MCP servers.\"\"\"<br>        convert_schemas_to_strict = self.mcp_config.get(\"convert_schemas_to_strict\", False)<br>        return await MCPUtil.get_all_function_tools(self.mcp_servers, convert_schemas_to_strict)<br>    async def get_all_tools(self, run_context: RunContextWrapper[Any]) -> list[Tool]:<br>        \"\"\"All agent tools, including MCP tools and function tools.\"\"\"<br>        mcp_tools = await self.get_mcp_tools()<br>        async def _check_tool_enabled(tool: Tool) -> bool:<br>            if not isinstance(tool, FunctionTool):<br>                return True<br>            attr = tool.is_enabled<br>            if isinstance(attr, bool):<br>                return attr<br>            res = attr(run_context, self)<br>            if inspect.isawaitable(res):<br>                return bool(await res)<br>            return bool(res)<br>        results = await asyncio.gather(*(_check_tool_enabled(t) for t in self.tools))<br>        enabled: list[Tool] = [t for t, ok in zip(self.tools, results) if ok]<br>        return [*mcp_tools, *enabled]<br>```` |\n\n#### name`instance-attribute`\n\n```md-code__content\nname: str\n\n```\n\nThe name of the agent.\n\n#### instructions`class-attribute``instance-attribute`\n\n```md-code__content\ninstructions: (\n    str\n    | Callable[\\\n        [RunContextWrapper[TContext], Agent[TContext]],\\\n        MaybeAwaitable[str],\\\n    ]\n    | None\n) = None\n\n```\n\nThe instructions for the agent. Will be used as the \"system prompt\" when this agent is\ninvoked. Describes what the agent should do, and how it responds.\n\nCan either be a string, or a function that dynamically generates instructions for the agent. If\nyou provide a function, it will be called with the context and the agent instance. It must\nreturn a string.\n\n#### prompt`class-attribute``instance-attribute`\n\n```md-code__content\nprompt: Prompt | DynamicPromptFunction | None = None\n\n```\n\nA prompt object (or a function that returns a Prompt). Prompts allow you to dynamically\nconfigure the instructions, tools and other config for an agent outside of your code. Only\nusable with OpenAI models, using the Responses API.\n\n#### handoff\\_description`class-attribute``instance-attribute`\n\n```md-code__content\nhandoff_description: str | None = None\n\n```\n\nA description of the agent. This is used when the agent is used as a handoff, so that an\nLLM knows what it does and when to invoke it.\n\n#### handoffs`class-attribute``instance-attribute`\n\n```md-code__content\nhandoffs: list[Agent[Any] | Handoff[TContext]] = field(\n    default_factory=list\n)\n\n```\n\nHandoffs are sub-agents that the agent can delegate to. You can provide a list of handoffs,\nand the agent can choose to delegate to them if relevant. Allows for separation of concerns and\nmodularity.\n\n#### model`class-attribute``instance-attribute`\n\n```md-code__content\nmodel: str | Model | None = None\n\n```\n\nThe model implementation to use when invoking the LLM.\n\nBy default, if not set, the agent will use the default model configured in\n`openai_provider.DEFAULT_MODEL` (currently \"gpt-4o\").\n\n#### model\\_settings`class-attribute``instance-attribute`\n\n```md-code__content\nmodel_settings: ModelSettings = field(\n    default_factory=ModelSettings\n)\n\n```\n\nConfigures model-specific tuning parameters (e.g. temperature, top\\_p).\n\n#### tools`class-attribute``instance-attribute`\n\n```md-code__content\ntools: list[Tool] = field(default_factory=list)\n\n```\n\nA list of tools that the agent can use.\n\n#### mcp\\_servers`class-attribute``instance-attribute`\n\n```md-code__content\nmcp_servers: list[MCPServer] = field(default_factory=list)\n\n```\n\nA list of [Model Context Protocol](https://modelcontextprotocol.io/) servers that\nthe agent can use. Every time the agent runs, it will include tools from these servers in the\nlist of available tools.\n\nNOTE: You are expected to manage the lifecycle of these servers. Specifically, you must call\n`server.connect()` before passing it to the agent, and `server.cleanup()` when the server is no\nlonger needed.\n\n#### mcp\\_config`class-attribute``instance-attribute`\n\n```md-code__content\nmcp_config: MCPConfig = field(\n    default_factory=lambda: MCPConfig()\n)\n\n```\n\nConfiguration for MCP servers.\n\n#### input\\_guardrails`class-attribute``instance-attribute`\n\n```md-code__content\ninput_guardrails: list[InputGuardrail[TContext]] = field(\n    default_factory=list\n)\n\n```\n\nA list of checks that run in parallel to the agent's execution, before generating a\nresponse. Runs only if the agent is the first agent in the chain.\n\n#### output\\_guardrails`class-attribute``instance-attribute`\n\n```md-code__content\noutput_guardrails: list[OutputGuardrail[TContext]] = field(\n    default_factory=list\n)\n\n```\n\nA list of checks that run on the final output of the agent, after generating a response.\nRuns only if the agent produces a final output.\n\n#### output\\_type`class-attribute``instance-attribute`\n\n```md-code__content\noutput_type: type[Any] | AgentOutputSchemaBase | None = None\n\n```\n\nThe type of the output object. If not provided, the output will be `str`. In most cases,\nyou should pass a regular Python type (e.g. a dataclass, Pydantic model, TypedDict, etc).\nYou can customize this in two ways:\n1\\. If you want non-strict schemas, pass `AgentOutputSchema(MyClass, strict_json_schema=False)`.\n2\\. If you want to use a custom JSON schema (i.e. without using the SDK's automatic schema)\ncreation, subclass and pass an `AgentOutputSchemaBase` subclass.\n\n#### hooks`class-attribute``instance-attribute`\n\n```md-code__content\nhooks: AgentHooks[TContext] | None = None\n\n```\n\nA class that receives callbacks on various lifecycle events for this agent.\n\n#### tool\\_use\\_behavior`class-attribute``instance-attribute`\n\n```md-code__content\ntool_use_behavior: (\n    Literal[\"run_llm_again\", \"stop_on_first_tool\"]\n    | StopAtTools\n    | ToolsToFinalOutputFunction\n) = \"run_llm_again\"\n\n```\n\nThis lets you configure how tool use is handled.\n\\- \"run\\_llm\\_again\": The default behavior. Tools are run, and then the LLM receives the results\nand gets to respond.\n\\- \"stop\\_on\\_first\\_tool\": The output of the first tool call is used as the final output. This\nmeans that the LLM does not process the result of the tool call.\n\\- A list of tool names: The agent will stop running if any of the tools in the list are called.\nThe final output will be the output of the first matching tool call. The LLM does not\nprocess the result of the tool call.\n\\- A function: If you pass a function, it will be called with the run context and the list of\ntool results. It must return a `ToolToFinalOutputResult`, which determines whether the tool\ncalls result in a final output.\n\nNOTE: This configuration is specific to FunctionTools. Hosted tools, such as file search,\nweb search, etc are always processed by the LLM.\n\n#### reset\\_tool\\_choice`class-attribute``instance-attribute`\n\n```md-code__content\nreset_tool_choice: bool = True\n\n```\n\nWhether to reset the tool choice to the default value after a tool has been called. Defaults\nto True. This ensures that the agent doesn't enter an infinite loop of tool usage.\n\n#### clone\n\n```md-code__content\nclone(**kwargs: Any) -> Agent[TContext]\n\n```\n\nMake a copy of the agent, with the given arguments changed. For example, you could do:\n\n```md-code__content\nnew_agent = agent.clone(instructions=\"New instructions\")\n\n```\n\nSource code in `src/agents/agent.py`\n\n|     |     |\n| --- | --- |\n| ```<br>190<br>191<br>192<br>193<br>194<br>195<br>196<br>``` | ````md-code__content<br>def clone(self, **kwargs: Any) -> Agent[TContext]:<br>    \"\"\"Make a copy of the agent, with the given arguments changed. For example, you could do:<br>    ```<br>    new_agent = agent.clone(instructions=\"New instructions\")<br>    ```<br>    \"\"\"<br>    return dataclasses.replace(self, **kwargs)<br>```` |\n\n#### as\\_tool\n\n```md-code__content\nas_tool(\n    tool_name: str | None,\n    tool_description: str | None,\n    custom_output_extractor: Callable[\\\n        [RunResult], Awaitable[str]\\\n    ]\n    | None = None,\n) -> Tool\n\n```\n\nTransform this agent into a tool, callable by other agents.\n\nThis is different from handoffs in two ways:\n1\\. In handoffs, the new agent receives the conversation history. In this tool, the new agent\nreceives generated input.\n2\\. In handoffs, the new agent takes over the conversation. In this tool, the new agent is\ncalled as a tool, and the conversation is continued by the original agent.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `tool_name` | `str | None` | The name of the tool. If not provided, the agent's name will be used. | _required_ |\n| `tool_description` | `str | None` | The description of the tool, which should indicate what it does and<br>when to use it. | _required_ |\n| `custom_output_extractor` | `Callable[[RunResult], Awaitable[str]] | None` | A function that extracts the output from the agent. If not<br>provided, the last message from the agent will be used. | `None` |\n\nSource code in `src/agents/agent.py`\n\n|     |     |\n| --- | --- |\n| ```<br>198<br>199<br>200<br>201<br>202<br>203<br>204<br>205<br>206<br>207<br>208<br>209<br>210<br>211<br>212<br>213<br>214<br>215<br>216<br>217<br>218<br>219<br>220<br>221<br>222<br>223<br>224<br>225<br>226<br>227<br>228<br>229<br>230<br>231<br>232<br>233<br>234<br>235<br>236<br>237<br>``` | ```md-code__content<br>def as_tool(<br>    self,<br>    tool_name: str | None,<br>    tool_description: str | None,<br>    custom_output_extractor: Callable[[RunResult], Awaitable[str]] | None = None,<br>) -> Tool:<br>    \"\"\"Transform this agent into a tool, callable by other agents.<br>    This is different from handoffs in two ways:<br>    1. In handoffs, the new agent receives the conversation history. In this tool, the new agent<br>       receives generated input.<br>    2. In handoffs, the new agent takes over the conversation. In this tool, the new agent is<br>       called as a tool, and the conversation is continued by the original agent.<br>    Args:<br>        tool_name: The name of the tool. If not provided, the agent's name will be used.<br>        tool_description: The description of the tool, which should indicate what it does and<br>            when to use it.<br>        custom_output_extractor: A function that extracts the output from the agent. If not<br>            provided, the last message from the agent will be used.<br>    \"\"\"<br>    @function_tool(<br>        name_override=tool_name or _transforms.transform_string_function_style(self.name),<br>        description_override=tool_description or \"\",<br>    )<br>    async def run_agent(context: RunContextWrapper, input: str) -> str:<br>        from .run import Runner<br>        output = await Runner.run(<br>            starting_agent=self,<br>            input=input,<br>            context=context.context,<br>        )<br>        if custom_output_extractor:<br>            return await custom_output_extractor(output)<br>        return ItemHelpers.text_message_outputs(output.new_items)<br>    return run_agent<br>``` |\n\n#### get\\_system\\_prompt`async`\n\n```md-code__content\nget_system_prompt(\n    run_context: RunContextWrapper[TContext],\n) -> str | None\n\n```\n\nGet the system prompt for the agent.\n\nSource code in `src/agents/agent.py`\n\n|     |     |\n| --- | --- |\n| ```<br>239<br>240<br>241<br>242<br>243<br>244<br>245<br>246<br>247<br>248<br>249<br>250<br>251<br>``` | ```md-code__content<br>async def get_system_prompt(self, run_context: RunContextWrapper[TContext]) -> str | None:<br>    \"\"\"Get the system prompt for the agent.\"\"\"<br>    if isinstance(self.instructions, str):<br>        return self.instructions<br>    elif callable(self.instructions):<br>        if inspect.iscoroutinefunction(self.instructions):<br>            return await cast(Awaitable[str], self.instructions(run_context, self))<br>        else:<br>            return cast(str, self.instructions(run_context, self))<br>    elif self.instructions is not None:<br>        logger.error(f\"Instructions must be a string or a function, got {self.instructions}\")<br>    return None<br>``` |\n\n#### get\\_prompt`async`\n\n```md-code__content\nget_prompt(\n    run_context: RunContextWrapper[TContext],\n) -> ResponsePromptParam | None\n\n```\n\nGet the prompt for the agent.\n\nSource code in `src/agents/agent.py`\n\n|     |     |\n| --- | --- |\n| ```<br>253<br>254<br>255<br>256<br>257<br>``` | ```md-code__content<br>async def get_prompt(<br>    self, run_context: RunContextWrapper[TContext]<br>) -> ResponsePromptParam | None:<br>    \"\"\"Get the prompt for the agent.\"\"\"<br>    return await PromptUtil.to_model_input(self.prompt, run_context, self)<br>``` |\n\n#### get\\_mcp\\_tools`async`\n\n```md-code__content\nget_mcp_tools() -> list[Tool]\n\n```\n\nFetches the available tools from the MCP servers.\n\nSource code in `src/agents/agent.py`\n\n|     |     |\n| --- | --- |\n| ```<br>259<br>260<br>261<br>262<br>``` | ```md-code__content<br>async def get_mcp_tools(self) -> list[Tool]:<br>    \"\"\"Fetches the available tools from the MCP servers.\"\"\"<br>    convert_schemas_to_strict = self.mcp_config.get(\"convert_schemas_to_strict\", False)<br>    return await MCPUtil.get_all_function_tools(self.mcp_servers, convert_schemas_to_strict)<br>``` |\n\n#### get\\_all\\_tools`async`\n\n```md-code__content\nget_all_tools(\n    run_context: RunContextWrapper[Any],\n) -> list[Tool]\n\n```\n\nAll agent tools, including MCP tools and function tools.\n\nSource code in `src/agents/agent.py`\n\n|     |     |\n| --- | --- |\n| ```<br>264<br>265<br>266<br>267<br>268<br>269<br>270<br>271<br>272<br>273<br>274<br>275<br>276<br>277<br>278<br>279<br>280<br>281<br>282<br>``` | ```md-code__content<br>async def get_all_tools(self, run_context: RunContextWrapper[Any]) -> list[Tool]:<br>    \"\"\"All agent tools, including MCP tools and function tools.\"\"\"<br>    mcp_tools = await self.get_mcp_tools()<br>    async def _check_tool_enabled(tool: Tool) -> bool:<br>        if not isinstance(tool, FunctionTool):<br>            return True<br>        attr = tool.is_enabled<br>        if isinstance(attr, bool):<br>            return attr<br>        res = attr(run_context, self)<br>        if inspect.isawaitable(res):<br>            return bool(await res)<br>        return bool(res)<br>    results = await asyncio.gather(*(_check_tool_enabled(t) for t in self.tools))<br>    enabled: list[Tool] = [t for t, ok in zip(self.tools, results) if ok]<br>    return [*mcp_tools, *enabled]<br>``` |",
  "metadata": {
    "viewport": "width=device-width,initial-scale=1",
    "language": "ja",
    "generator": "mkdocs-1.6.1, mkdocs-material-9.6.11",
    "title": "Agents - OpenAI Agents SDK",
    "favicon": "https://openai.github.io/openai-agents-python/images/favicon-platform.svg",
    "scrapeId": "3526350a-91e9-491c-87ff-61600fe367ff",
    "sourceURL": "https://openai.github.io/openai-agents-python/ja/ref/agent/",
    "url": "https://openai.github.io/openai-agents-python/ja/ref/agent/",
    "statusCode": 200,
    "contentType": "text/html; charset=utf-8",
    "proxyUsed": "basic"
  }
}