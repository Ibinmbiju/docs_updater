{
  "markdown": "[コンテンツにスキップ](https://openai.github.io/openai-agents-python/ja/guardrails/#_1)\n\n# ガードレール\n\nガードレールは エージェント と _並列_ に実行され、 ユーザー入力 のチェックとバリデーションを行います。たとえば、顧客からのリクエストを支援するために非常に賢い (そのため遅く / 高価な) モデルを使うエージェントがあるとします。悪意のある ユーザー がモデルに数学の宿題を手伝わせようとするのは避けたいですよね。その場合、 高速 / 低コスト のモデルでガードレールを実行できます。ガードレールが悪意のある利用を検知した場合、即座にエラーを送出して高価なモデルの実行を停止し、時間と費用を節約できます。\n\nガードレールには 2 種類あります。\n\n1. Input ガードレールは最初の ユーザー入力 に対して実行されます\n2. Output ガードレールは最終的なエージェント出力に対して実行されます\n\n## Input ガードレール\n\nInput ガードレールは 3 つのステップで実行されます。\n\n1. まず、ガードレールはエージェントに渡されたものと同じ入力を受け取ります。\n2. 次に、ガードレール関数が実行され [`GuardrailFunctionOutput`](https://openai.github.io/openai-agents-python/ref/guardrail/#agents.guardrail.GuardrailFunctionOutput \"GuardrailFunctionOutput            dataclass   \") を生成し、それが [`InputGuardrailResult`](https://openai.github.io/openai-agents-python/ref/guardrail/#agents.guardrail.InputGuardrailResult \"InputGuardrailResult            dataclass   \") でラップされます。\n3. 最後に [`.tripwire_triggered`](https://openai.github.io/openai-agents-python/ref/guardrail/#agents.guardrail.GuardrailFunctionOutput.tripwire_triggered \"tripwire_triggered            instance-attribute   \") が true かどうかを確認します。true の場合、 [`InputGuardrailTripwireTriggered`](https://openai.github.io/openai-agents-python/ref/exceptions/#agents.exceptions.InputGuardrailTripwireTriggered \"InputGuardrailTripwireTriggered\") 例外が送出されるので、 ユーザー への適切な応答や例外処理を行えます。\n\nNote\n\nInput ガードレールは ユーザー入力 に対して実行されることを想定しているため、エージェントのガードレールが実行されるのはそのエージェントが _最初_ のエージェントである場合だけです。「なぜ `guardrails` プロパティがエージェントにあり、 `Runner.run` に渡さないのか？」と思うかもしれません。ガードレールは実際の エージェント に密接に関連する場合が多く、エージェントごとに異なるガードレールを実行するため、コードを同じ場所に置くことで可読性が向上するからです。\n\n## Output ガードレール\n\nOutput ガードレールは 3 つのステップで実行されます。\n\n1. まず、ガードレールはエージェントに渡されたものと同じ入力を受け取ります。\n2. 次に、ガードレール関数が実行され [`GuardrailFunctionOutput`](https://openai.github.io/openai-agents-python/ref/guardrail/#agents.guardrail.GuardrailFunctionOutput \"GuardrailFunctionOutput            dataclass   \") を生成し、それが [`OutputGuardrailResult`](https://openai.github.io/openai-agents-python/ref/guardrail/#agents.guardrail.OutputGuardrailResult \"OutputGuardrailResult            dataclass   \") でラップされます。\n3. 最後に [`.tripwire_triggered`](https://openai.github.io/openai-agents-python/ref/guardrail/#agents.guardrail.GuardrailFunctionOutput.tripwire_triggered \"tripwire_triggered            instance-attribute   \") が true かどうかを確認します。true の場合、 [`OutputGuardrailTripwireTriggered`](https://openai.github.io/openai-agents-python/ref/exceptions/#agents.exceptions.OutputGuardrailTripwireTriggered \"OutputGuardrailTripwireTriggered\") 例外が送出されるので、 ユーザー への適切な応答や例外処理を行えます。\n\nNote\n\nOutput ガードレールは最終的なエージェント出力に対して実行されることを想定しているため、エージェントのガードレールが実行されるのはそのエージェントが _最後_ のエージェントである場合だけです。Input ガードレール同様、ガードレールは実際の エージェント に密接に関連するため、コードを同じ場所に置くことで可読性が向上します。\n\n## トリップワイヤ\n\n入力または出力がガードレールに失敗した場合、ガードレールはトリップワイヤを用いてそれを通知できます。ガードレールがトリップワイヤを発火したことを検知すると、ただちに `{Input,Output}GuardrailTripwireTriggered` 例外を送出してエージェントの実行を停止します。\n\n## ガードレールの実装\n\n入力を受け取り、 [`GuardrailFunctionOutput`](https://openai.github.io/openai-agents-python/ref/guardrail/#agents.guardrail.GuardrailFunctionOutput \"GuardrailFunctionOutput            dataclass   \") を返す関数を用意する必要があります。次の例では、内部で エージェント を実行してこれを行います。\n\n```md-code__content\nfrom pydantic import BaseModel\nfrom agents import (\n    Agent,\n    GuardrailFunctionOutput,\n    InputGuardrailTripwireTriggered,\n    RunContextWrapper,\n    Runner,\n    TResponseInputItem,\n    input_guardrail,\n)\n\nclass MathHomeworkOutput(BaseModel):\n    is_math_homework: bool\n    reasoning: str\n\nguardrail_agent = Agent(\n    name=\"Guardrail check\",\n    instructions=\"Check if the user is asking you to do their math homework.\",\n    output_type=MathHomeworkOutput,\n)\n\n@input_guardrail\nasync def math_guardrail(\n    ctx: RunContextWrapper[None], agent: Agent, input: str | list[TResponseInputItem]\n) -> GuardrailFunctionOutput:\n    result = await Runner.run(guardrail_agent, input, context=ctx.context)\n\n    return GuardrailFunctionOutput(\n        output_info=result.final_output,\n        tripwire_triggered=result.final_output.is_math_homework,\n    )\n\nagent = Agent(\n    name=\"Customer support agent\",\n    instructions=\"You are a customer support agent. You help customers with their questions.\",\n    input_guardrails=[math_guardrail],\n)\n\nasync def main():\n    # This should trip the guardrail\n    try:\n        await Runner.run(agent, \"Hello, can you help me solve for x: 2x + 3 = 11?\")\n        print(\"Guardrail didn't trip - this is unexpected\")\n\n    except InputGuardrailTripwireTriggered:\n        print(\"Math homework guardrail tripped\")\n\n```\n\nOutput ガードレールも同様です。\n\n```md-code__content\nfrom pydantic import BaseModel\nfrom agents import (\n    Agent,\n    GuardrailFunctionOutput,\n    OutputGuardrailTripwireTriggered,\n    RunContextWrapper,\n    Runner,\n    output_guardrail,\n)\nclass MessageOutput(BaseModel):\n    response: str\n\nclass MathOutput(BaseModel):\n    reasoning: str\n    is_math: bool\n\nguardrail_agent = Agent(\n    name=\"Guardrail check\",\n    instructions=\"Check if the output includes any math.\",\n    output_type=MathOutput,\n)\n\n@output_guardrail\nasync def math_guardrail(\n    ctx: RunContextWrapper, agent: Agent, output: MessageOutput\n) -> GuardrailFunctionOutput:\n    result = await Runner.run(guardrail_agent, output.response, context=ctx.context)\n\n    return GuardrailFunctionOutput(\n        output_info=result.final_output,\n        tripwire_triggered=result.final_output.is_math,\n    )\n\nagent = Agent(\n    name=\"Customer support agent\",\n    instructions=\"You are a customer support agent. You help customers with their questions.\",\n    output_guardrails=[math_guardrail],\n    output_type=MessageOutput,\n)\n\nasync def main():\n    # This should trip the guardrail\n    try:\n        await Runner.run(agent, \"Hello, can you help me solve for x: 2x + 3 = 11?\")\n        print(\"Guardrail didn't trip - this is unexpected\")\n\n    except OutputGuardrailTripwireTriggered:\n        print(\"Math output guardrail tripped\")\n\n```",
  "metadata": {
    "title": "ガードレール - OpenAI Agents SDK",
    "favicon": "https://openai.github.io/openai-agents-python/images/favicon-platform.svg",
    "viewport": "width=device-width,initial-scale=1",
    "generator": "mkdocs-1.6.1, mkdocs-material-9.6.11",
    "language": "ja",
    "scrapeId": "a7306ab2-c17a-4695-8a04-8bc1cd297348",
    "sourceURL": "https://openai.github.io/openai-agents-python/ja/guardrails/",
    "url": "https://openai.github.io/openai-agents-python/ja/guardrails/",
    "statusCode": 200,
    "contentType": "text/html; charset=utf-8",
    "proxyUsed": "basic"
  }
}