{
  "markdown": "[コンテンツにスキップ](https://openai.github.io/openai-agents-python/ja/multi_agent/#_1)\n\n# 複数エージェントのオーケストレーション\n\nオーケストレーションとは、アプリ内でエージェントがどのように流れるかを指します。どのエージェントが、どの順序で実行され、その後どう決定するかを制御します。エージェントをオーケストレーションする主な方法は次の 2 つです。\n\n1. LLM に判断させる: LLM の知能を活用し、計画・推論を行い、その結果に基づいて次のステップを決定します。\n2. コードでオーケストレーションする: コード側でエージェントの流れを定義します。\n\nこれらのパターンは組み合わせて使用できます。それぞれにトレードオフがあり、以下で説明します。\n\n## LLM によるオーケストレーション\n\nエージェントとは、 instructions、ツール、ハンドオフを備えた LLM です。オープンエンドなタスクが与えられた場合、 LLM はタスクをどのように進めるかを自律的に計画し、ツールを使ってアクションやデータ取得を行い、ハンドオフでサブエージェントへタスクを委譲できます。たとえば、リサーチエージェントには次のようなツールを装備できます。\n\n- Web 検索でオンライン情報を取得する\n- ファイル検索で独自データや接続を調べる\n- コンピュータ操作でコンピュータ上のアクションを実行する\n- コード実行でデータ分析を行う\n- 計画立案やレポート作成などに長けた専門エージェントへのハンドオフ\n\nこのパターンはタスクがオープンエンドで、 LLM の知能に頼りたい場合に最適です。重要な戦術は次のとおりです。\n\n1. 良いプロンプトに投資する。利用可能なツール、使い方、守るべきパラメーターを明確に示します。\n2. アプリを監視し、改善を繰り返す。問題が起きた箇所を特定し、プロンプトを改善します。\n3. エージェントに内省と改善を許可する。たとえばループで実行し自己批評させたり、エラーメッセージを渡して修正させたりします。\n4. 何でもこなす汎用エージェントより、特定タスクに特化したエージェントを用意します。\n5. [evals](https://platform.openai.com/docs/guides/evals) に投資する。これによりエージェントを訓練し、タスク性能を向上できます。\n\n## コードによるオーケストレーション\n\nLLM によるオーケストレーションは強力ですが、コードでオーケストレーションすると速度・コスト・性能の面でより決定的かつ予測可能になります。よく使われるパターンは次のとおりです。\n\n- [structured outputs](https://platform.openai.com/docs/guides/structured-outputs) を使って、コード側で検査できる 適切な形式のデータ を生成する。たとえばエージェントにタスクをいくつかのカテゴリーに分類させ、そのカテゴリーに応じて次のエージェントを選択します。\n- あるエージェントの出力を次のエージェントの入力に変換して複数エージェントをチェーンする。ブログ記事執筆を「リサーチ → アウトライン作成 → 記事執筆 → 批評 → 改善」という一連のステップに分解できます。\n- タスクを実行するエージェントを `while` ループで回し、評価とフィードバックを行うエージェントと組み合わせ、評価者が基準を満たしたと判断するまで繰り返します。\n- `asyncio.gather` など Python の基本コンポーネントを用いて複数エージェントを並列実行する。互いに依存しない複数タスクがある場合に高速化できます。\n\n[`examples/agent_patterns`](https://github.com/openai/openai-agents-python/tree/main/examples/agent_patterns) には多数のコード例があります。",
  "metadata": {
    "favicon": "https://openai.github.io/openai-agents-python/images/favicon-platform.svg",
    "title": "複数エージェントのオーケストレーション - OpenAI Agents SDK",
    "viewport": "width=device-width,initial-scale=1",
    "language": "ja",
    "generator": "mkdocs-1.6.1, mkdocs-material-9.6.11",
    "scrapeId": "417b6260-c420-433d-8824-68b7bf7a5c9f",
    "sourceURL": "https://openai.github.io/openai-agents-python/ja/multi_agent/",
    "url": "https://openai.github.io/openai-agents-python/ja/multi_agent/",
    "statusCode": 200,
    "contentType": "text/html; charset=utf-8",
    "proxyUsed": "basic"
  }
}