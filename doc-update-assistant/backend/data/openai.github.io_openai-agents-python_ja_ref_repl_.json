{
  "markdown": "[コンテンツにスキップ](https://openai.github.io/openai-agents-python/ja/ref/repl/#repl)\n\n# `repl`\n\n### run\\_demo\\_loop`async`\n\n```md-code__content\nrun_demo_loop(\n    agent: Agent[Any], *, stream: bool = True\n) -> None\n\n```\n\nRun a simple REPL loop with the given agent.\n\nThis utility allows quick manual testing and debugging of an agent from the\ncommand line. Conversation state is preserved across turns. Enter `exit`\nor `quit` to stop the loop.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `agent` | `Agent[Any]` | The starting agent to run. | _required_ |\n| `stream` | `bool` | Whether to stream the agent output. | `True` |\n\nSource code in `src/agents/repl.py`\n\n|     |     |\n| --- | --- |\n| ```<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br>39<br>40<br>41<br>42<br>43<br>44<br>45<br>46<br>47<br>48<br>49<br>50<br>51<br>52<br>53<br>54<br>55<br>56<br>57<br>58<br>59<br>60<br>61<br>62<br>63<br>64<br>65<br>``` | ```md-code__content<br>async def run_demo_loop(agent: Agent[Any], *, stream: bool = True) -> None:<br>    \"\"\"Run a simple REPL loop with the given agent.<br>    This utility allows quick manual testing and debugging of an agent from the<br>    command line. Conversation state is preserved across turns. Enter ``exit``<br>    or ``quit`` to stop the loop.<br>    Args:<br>        agent: The starting agent to run.<br>        stream: Whether to stream the agent output.<br>    \"\"\"<br>    current_agent = agent<br>    input_items: list[TResponseInputItem] = []<br>    while True:<br>        try:<br>            user_input = input(\" > \")<br>        except (EOFError, KeyboardInterrupt):<br>            print()<br>            break<br>        if user_input.strip().lower() in {\"exit\", \"quit\"}:<br>            break<br>        if not user_input:<br>            continue<br>        input_items.append({\"role\": \"user\", \"content\": user_input})<br>        result: RunResultBase<br>        if stream:<br>            result = Runner.run_streamed(current_agent, input=input_items)<br>            async for event in result.stream_events():<br>                if isinstance(event, RawResponsesStreamEvent):<br>                    if isinstance(event.data, ResponseTextDeltaEvent):<br>                        print(event.data.delta, end=\"\", flush=True)<br>                elif isinstance(event, RunItemStreamEvent):<br>                    if event.item.type == \"tool_call_item\":<br>                        print(\"\\n[tool called]\", flush=True)<br>                    elif event.item.type == \"tool_call_output_item\":<br>                        print(f\"\\n[tool output: {event.item.output}]\", flush=True)<br>                    elif event.item.type == \"message_output_item\":<br>                        message = ItemHelpers.text_message_output(event.item)<br>                        print(message, end=\"\", flush=True)<br>                elif isinstance(event, AgentUpdatedStreamEvent):<br>                    print(f\"\\n[Agent updated: {event.new_agent.name}]\", flush=True)<br>            print()<br>        else:<br>            result = await Runner.run(current_agent, input_items)<br>            if result.final_output is not None:<br>                print(result.final_output)<br>        current_agent = result.last_agent<br>        input_items = result.to_input_list()<br>``` |",
  "metadata": {
    "favicon": "https://openai.github.io/openai-agents-python/images/favicon-platform.svg",
    "generator": "mkdocs-1.6.1, mkdocs-material-9.6.11",
    "title": "repl - OpenAI Agents SDK",
    "viewport": "width=device-width,initial-scale=1",
    "language": "ja",
    "scrapeId": "8b27f08a-1096-4c7c-ba09-d5833962847a",
    "sourceURL": "https://openai.github.io/openai-agents-python/ja/ref/repl/",
    "url": "https://openai.github.io/openai-agents-python/ja/ref/repl/",
    "statusCode": 200,
    "contentType": "text/html; charset=utf-8",
    "proxyUsed": "basic"
  }
}