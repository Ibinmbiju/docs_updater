{
  "markdown": "[コンテンツにスキップ](https://openai.github.io/openai-agents-python/ja/quickstart/#_1)\n\n# クイックスタート\n\n## プロジェクトと仮想環境の作成\n\nこれは一度だけ行えば十分です。\n\n```md-code__content\nmkdir my_project\ncd my_project\npython -m venv .venv\n\n```\n\n### 仮想環境の有効化\n\n新しいターミナルセッションを開始するたびに実行してください。\n\n```md-code__content\nsource .venv/bin/activate\n\n```\n\n### Agents SDK のインストール\n\n```md-code__content\npip install openai-agents # or `uv add openai-agents`, etc\n\n```\n\n### OpenAI API キーの設定\n\nまだお持ちでない場合は、 [こちらの手順](https://platform.openai.com/docs/quickstart#create-and-export-an-api-key) に従って OpenAI API キーを作成してください。\n\n```md-code__content\nexport OPENAI_API_KEY=sk-...\n\n```\n\n## 最初のエージェントの作成\n\nエージェントは instructions 、名前、 `model_config` などのオプション設定で定義します。\n\n```md-code__content\nfrom agents import Agent\n\nagent = Agent(\n    name=\"Math Tutor\",\n    instructions=\"You provide help with math problems. Explain your reasoning at each step and include examples\",\n)\n\n```\n\n## さらにエージェントを追加\n\n追加のエージェントも同様の方法で定義できます。 `handoff_descriptions` はハンドオフのルーティングを判断するための追加コンテキストを提供します。\n\n```md-code__content\nfrom agents import Agent\n\nhistory_tutor_agent = Agent(\n    name=\"History Tutor\",\n    handoff_description=\"Specialist agent for historical questions\",\n    instructions=\"You provide assistance with historical queries. Explain important events and context clearly.\",\n)\n\nmath_tutor_agent = Agent(\n    name=\"Math Tutor\",\n    handoff_description=\"Specialist agent for math questions\",\n    instructions=\"You provide help with math problems. Explain your reasoning at each step and include examples\",\n)\n\n```\n\n## ハンドオフの定義\n\n各エージェントに対して、タスクを進める際に選択できるハンドオフ先の一覧を定義できます。\n\n```md-code__content\ntriage_agent = Agent(\n    name=\"Triage Agent\",\n    instructions=\"You determine which agent to use based on the user's homework question\",\n    handoffs=[history_tutor_agent, math_tutor_agent]\n)\n\n```\n\n## エージェントオーケストレーションの実行\n\nワークフローが実行され、トリアージエージェントが 2 つの専門エージェント間で正しくルーティングすることを確認しましょう。\n\n```md-code__content\nfrom agents import Runner\n\nasync def main():\n    result = await Runner.run(triage_agent, \"What is the capital of France?\")\n    print(result.final_output)\n\n```\n\n## ガードレールの追加\n\n入力または出力に対して実行されるカスタムガードレールを定義できます。\n\n```md-code__content\nfrom agents import GuardrailFunctionOutput, Agent, Runner\nfrom pydantic import BaseModel\n\nclass HomeworkOutput(BaseModel):\n    is_homework: bool\n    reasoning: str\n\nguardrail_agent = Agent(\n    name=\"Guardrail check\",\n    instructions=\"Check if the user is asking about homework.\",\n    output_type=HomeworkOutput,\n)\n\nasync def homework_guardrail(ctx, agent, input_data):\n    result = await Runner.run(guardrail_agent, input_data, context=ctx.context)\n    final_output = result.final_output_as(HomeworkOutput)\n    return GuardrailFunctionOutput(\n        output_info=final_output,\n        tripwire_triggered=not final_output.is_homework,\n    )\n\n```\n\n## すべてをまとめる\n\nハンドオフと入力ガードレールを組み合わせて、ワークフロー全体を実行してみましょう。\n\n```md-code__content\nfrom agents import Agent, InputGuardrail, GuardrailFunctionOutput, Runner\nfrom pydantic import BaseModel\nimport asyncio\n\nclass HomeworkOutput(BaseModel):\n    is_homework: bool\n    reasoning: str\n\nguardrail_agent = Agent(\n    name=\"Guardrail check\",\n    instructions=\"Check if the user is asking about homework.\",\n    output_type=HomeworkOutput,\n)\n\nmath_tutor_agent = Agent(\n    name=\"Math Tutor\",\n    handoff_description=\"Specialist agent for math questions\",\n    instructions=\"You provide help with math problems. Explain your reasoning at each step and include examples\",\n)\n\nhistory_tutor_agent = Agent(\n    name=\"History Tutor\",\n    handoff_description=\"Specialist agent for historical questions\",\n    instructions=\"You provide assistance with historical queries. Explain important events and context clearly.\",\n)\n\nasync def homework_guardrail(ctx, agent, input_data):\n    result = await Runner.run(guardrail_agent, input_data, context=ctx.context)\n    final_output = result.final_output_as(HomeworkOutput)\n    return GuardrailFunctionOutput(\n        output_info=final_output,\n        tripwire_triggered=not final_output.is_homework,\n    )\n\ntriage_agent = Agent(\n    name=\"Triage Agent\",\n    instructions=\"You determine which agent to use based on the user's homework question\",\n    handoffs=[history_tutor_agent, math_tutor_agent],\n    input_guardrails=[\\\n        InputGuardrail(guardrail_function=homework_guardrail),\\\n    ],\n)\n\nasync def main():\n    result = await Runner.run(triage_agent, \"who was the first president of the united states?\")\n    print(result.final_output)\n\n    result = await Runner.run(triage_agent, \"what is life\")\n    print(result.final_output)\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n\n```\n\n## トレースの表示\n\nエージェントの実行内容を確認するには、 [OpenAI ダッシュボードの Trace viewer](https://platform.openai.com/traces) に移動してトレースを閲覧してください。\n\n## 次のステップ\n\nより複雑なエージェントフローの構築方法を学びましょう。\n\n- [エージェント](https://openai.github.io/openai-agents-python/ja/agents/) の設定方法を学ぶ。\n- [エージェントの実行](https://openai.github.io/openai-agents-python/ja/running_agents/) について学ぶ。\n- [ツール](https://openai.github.io/openai-agents-python/ja/tools/)、 [ガードレール](https://openai.github.io/openai-agents-python/ja/guardrails/)、 [モデル](https://openai.github.io/openai-agents-python/ja/models/) について学ぶ。",
  "metadata": {
    "viewport": "width=device-width,initial-scale=1",
    "favicon": "https://openai.github.io/openai-agents-python/images/favicon-platform.svg",
    "generator": "mkdocs-1.6.1, mkdocs-material-9.6.11",
    "title": "クイックスタート - OpenAI Agents SDK",
    "language": "ja",
    "scrapeId": "f7c8f0c9-a9b2-462c-8b78-c904905cddb8",
    "sourceURL": "https://openai.github.io/openai-agents-python/ja/quickstart/",
    "url": "https://openai.github.io/openai-agents-python/ja/quickstart/",
    "statusCode": 200,
    "contentType": "text/html; charset=utf-8",
    "proxyUsed": "basic"
  }
}