{
  "markdown": "[Skip to content](https://openai.github.io/openai-agents-python/ref/lifecycle/#lifecycle)\n\n# `Lifecycle`\n\n### RunHooks\n\nBases: `Generic[TContext]`\n\nA class that receives callbacks on various lifecycle events in an agent run. Subclass and\noverride the methods you need.\n\n#### on\\_agent\\_start`async`\n\n```md-code__content\non_agent_start(\n    context: RunContextWrapper[TContext],\n    agent: Agent[TContext],\n) -> None\n\n```\n\nCalled before the agent is invoked. Called each time the current agent changes.\n\n#### on\\_agent\\_end`async`\n\n```md-code__content\non_agent_end(\n    context: RunContextWrapper[TContext],\n    agent: Agent[TContext],\n    output: Any,\n) -> None\n\n```\n\nCalled when the agent produces a final output.\n\n#### on\\_handoff`async`\n\n```md-code__content\non_handoff(\n    context: RunContextWrapper[TContext],\n    from_agent: Agent[TContext],\n    to_agent: Agent[TContext],\n) -> None\n\n```\n\nCalled when a handoff occurs.\n\n#### on\\_tool\\_start`async`\n\n```md-code__content\non_tool_start(\n    context: RunContextWrapper[TContext],\n    agent: Agent[TContext],\n    tool: Tool,\n) -> None\n\n```\n\nCalled before a tool is invoked.\n\n#### on\\_tool\\_end`async`\n\n```md-code__content\non_tool_end(\n    context: RunContextWrapper[TContext],\n    agent: Agent[TContext],\n    tool: Tool,\n    result: str,\n) -> None\n\n```\n\nCalled after a tool is invoked.\n\n### AgentHooks\n\nBases: `Generic[TContext]`\n\nA class that receives callbacks on various lifecycle events for a specific agent. You can\nset this on `agent.hooks` to receive events for that specific agent.\n\nSubclass and override the methods you need.\n\n#### on\\_start`async`\n\n```md-code__content\non_start(\n    context: RunContextWrapper[TContext],\n    agent: Agent[TContext],\n) -> None\n\n```\n\nCalled before the agent is invoked. Called each time the running agent is changed to this\nagent.\n\n#### on\\_end`async`\n\n```md-code__content\non_end(\n    context: RunContextWrapper[TContext],\n    agent: Agent[TContext],\n    output: Any,\n) -> None\n\n```\n\nCalled when the agent produces a final output.\n\n#### on\\_handoff`async`\n\n```md-code__content\non_handoff(\n    context: RunContextWrapper[TContext],\n    agent: Agent[TContext],\n    source: Agent[TContext],\n) -> None\n\n```\n\nCalled when the agent is being handed off to. The `source` is the agent that is handing\noff to this agent.\n\n#### on\\_tool\\_start`async`\n\n```md-code__content\non_tool_start(\n    context: RunContextWrapper[TContext],\n    agent: Agent[TContext],\n    tool: Tool,\n) -> None\n\n```\n\nCalled before a tool is invoked.\n\n#### on\\_tool\\_end`async`\n\n```md-code__content\non_tool_end(\n    context: RunContextWrapper[TContext],\n    agent: Agent[TContext],\n    tool: Tool,\n    result: str,\n) -> None\n\n```\n\nCalled after a tool is invoked.",
  "metadata": {
    "generator": "mkdocs-1.6.1, mkdocs-material-9.6.11",
    "title": "Lifecycle - OpenAI Agents SDK",
    "language": "en",
    "viewport": "width=device-width,initial-scale=1",
    "favicon": "https://openai.github.io/openai-agents-python/images/favicon-platform.svg",
    "scrapeId": "0067177e-bd00-4c4c-a88f-e9af44aaab93",
    "sourceURL": "https://openai.github.io/openai-agents-python/ref/lifecycle/",
    "url": "https://openai.github.io/openai-agents-python/ref/lifecycle/",
    "statusCode": 200,
    "contentType": "text/html; charset=utf-8",
    "proxyUsed": "basic"
  }
}